// Code generated by ent, DO NOT EDIT.

package accesspolicy

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/schema"
)

const (
	// Label holds the string label denoting the accesspolicy type in the database.
	Label = "access_policy"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEffect holds the string denoting the effect field in the database.
	FieldEffect = "effect"
	// FieldStatements holds the string denoting the statements field in the database.
	FieldStatements = "statements"
	// FieldImmutable holds the string denoting the immutable field in the database.
	FieldImmutable = "immutable"
	// EdgeRoles holds the string denoting the roles edge name in mutations.
	EdgeRoles = "roles"
	// Table holds the table name of the accesspolicy in the database.
	Table = "access_policies"
	// RolesTable is the table that holds the roles relation/edge.
	RolesTable = "roles"
	// RolesInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RolesInverseTable = "roles"
	// RolesColumn is the table column denoting the roles relation/edge.
	RolesColumn = "access_policy_roles"
)

// Columns holds all SQL columns for accesspolicy fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldDescription,
	FieldEffect,
	FieldStatements,
	FieldImmutable,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultStatements holds the default value on creation for the "statements" field.
	DefaultStatements schema.PolicyStatement
	// DefaultImmutable holds the default value on creation for the "immutable" field.
	DefaultImmutable bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// Effect defines the type for the "effect" enum field.
type Effect string

// EffectAllow is the default value of the Effect enum.
const DefaultEffect = EffectAllow

// Effect values.
const (
	EffectAllow Effect = "allow"
	EffectDeny  Effect = "deny"
)

func (e Effect) String() string {
	return string(e)
}

// EffectValidator is a validator for the "effect" field enum values. It is called by the builders before save.
func EffectValidator(e Effect) error {
	switch e {
	case EffectAllow, EffectDeny:
		return nil
	default:
		return fmt.Errorf("accesspolicy: invalid enum value for effect field: %q", e)
	}
}

// OrderOption defines the ordering options for the AccessPolicy queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEffect orders the results by the effect field.
func ByEffect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEffect, opts...).ToFunc()
}

// ByImmutable orders the results by the immutable field.
func ByImmutable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImmutable, opts...).ToFunc()
}

// ByRolesCount orders the results by roles count.
func ByRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRolesStep(), opts...)
	}
}

// ByRoles orders the results by roles terms.
func ByRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RolesTable, RolesColumn),
	)
}
