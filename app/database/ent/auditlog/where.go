// Code generated by ent, DO NOT EDIT.

package auditlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// Timestamp applies equality check predicate on the "timestamp" field. It's identical to TimestampEQ.
func Timestamp(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTimestamp, v))
}

// ActorID applies equality check predicate on the "actor_id" field. It's identical to ActorIDEQ.
func ActorID(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldActorID, v))
}

// ActorUsername applies equality check predicate on the "actor_username" field. It's identical to ActorUsernameEQ.
func ActorUsername(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldActorUsername, v))
}

// Action applies equality check predicate on the "action" field. It's identical to ActionEQ.
func Action(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldAction, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceID, v))
}

// ResourceType applies equality check predicate on the "resource_type" field. It's identical to ResourceTypeEQ.
func ResourceType(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// TimestampEQ applies the EQ predicate on the "timestamp" field.
func TimestampEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldTimestamp, v))
}

// TimestampNEQ applies the NEQ predicate on the "timestamp" field.
func TimestampNEQ(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldTimestamp, v))
}

// TimestampIn applies the In predicate on the "timestamp" field.
func TimestampIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldTimestamp, vs...))
}

// TimestampNotIn applies the NotIn predicate on the "timestamp" field.
func TimestampNotIn(vs ...time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldTimestamp, vs...))
}

// TimestampGT applies the GT predicate on the "timestamp" field.
func TimestampGT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldTimestamp, v))
}

// TimestampGTE applies the GTE predicate on the "timestamp" field.
func TimestampGTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldTimestamp, v))
}

// TimestampLT applies the LT predicate on the "timestamp" field.
func TimestampLT(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldTimestamp, v))
}

// TimestampLTE applies the LTE predicate on the "timestamp" field.
func TimestampLTE(v time.Time) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldTimestamp, v))
}

// ActorIDEQ applies the EQ predicate on the "actor_id" field.
func ActorIDEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldActorID, v))
}

// ActorIDNEQ applies the NEQ predicate on the "actor_id" field.
func ActorIDNEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldActorID, v))
}

// ActorIDIn applies the In predicate on the "actor_id" field.
func ActorIDIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldActorID, vs...))
}

// ActorIDNotIn applies the NotIn predicate on the "actor_id" field.
func ActorIDNotIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldActorID, vs...))
}

// ActorIDGT applies the GT predicate on the "actor_id" field.
func ActorIDGT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldActorID, v))
}

// ActorIDGTE applies the GTE predicate on the "actor_id" field.
func ActorIDGTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldActorID, v))
}

// ActorIDLT applies the LT predicate on the "actor_id" field.
func ActorIDLT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldActorID, v))
}

// ActorIDLTE applies the LTE predicate on the "actor_id" field.
func ActorIDLTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldActorID, v))
}

// ActorUsernameEQ applies the EQ predicate on the "actor_username" field.
func ActorUsernameEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldActorUsername, v))
}

// ActorUsernameNEQ applies the NEQ predicate on the "actor_username" field.
func ActorUsernameNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldActorUsername, v))
}

// ActorUsernameIn applies the In predicate on the "actor_username" field.
func ActorUsernameIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldActorUsername, vs...))
}

// ActorUsernameNotIn applies the NotIn predicate on the "actor_username" field.
func ActorUsernameNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldActorUsername, vs...))
}

// ActorUsernameGT applies the GT predicate on the "actor_username" field.
func ActorUsernameGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldActorUsername, v))
}

// ActorUsernameGTE applies the GTE predicate on the "actor_username" field.
func ActorUsernameGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldActorUsername, v))
}

// ActorUsernameLT applies the LT predicate on the "actor_username" field.
func ActorUsernameLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldActorUsername, v))
}

// ActorUsernameLTE applies the LTE predicate on the "actor_username" field.
func ActorUsernameLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldActorUsername, v))
}

// ActorUsernameContains applies the Contains predicate on the "actor_username" field.
func ActorUsernameContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldActorUsername, v))
}

// ActorUsernameHasPrefix applies the HasPrefix predicate on the "actor_username" field.
func ActorUsernameHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldActorUsername, v))
}

// ActorUsernameHasSuffix applies the HasSuffix predicate on the "actor_username" field.
func ActorUsernameHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldActorUsername, v))
}

// ActorUsernameEqualFold applies the EqualFold predicate on the "actor_username" field.
func ActorUsernameEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldActorUsername, v))
}

// ActorUsernameContainsFold applies the ContainsFold predicate on the "actor_username" field.
func ActorUsernameContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldActorUsername, v))
}

// ActionEQ applies the EQ predicate on the "action" field.
func ActionEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldAction, v))
}

// ActionNEQ applies the NEQ predicate on the "action" field.
func ActionNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldAction, v))
}

// ActionIn applies the In predicate on the "action" field.
func ActionIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldAction, vs...))
}

// ActionNotIn applies the NotIn predicate on the "action" field.
func ActionNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldAction, vs...))
}

// ActionGT applies the GT predicate on the "action" field.
func ActionGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldAction, v))
}

// ActionGTE applies the GTE predicate on the "action" field.
func ActionGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldAction, v))
}

// ActionLT applies the LT predicate on the "action" field.
func ActionLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldAction, v))
}

// ActionLTE applies the LTE predicate on the "action" field.
func ActionLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldAction, v))
}

// ActionContains applies the Contains predicate on the "action" field.
func ActionContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldAction, v))
}

// ActionHasPrefix applies the HasPrefix predicate on the "action" field.
func ActionHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldAction, v))
}

// ActionHasSuffix applies the HasSuffix predicate on the "action" field.
func ActionHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldAction, v))
}

// ActionEqualFold applies the EqualFold predicate on the "action" field.
func ActionEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldAction, v))
}

// ActionContainsFold applies the ContainsFold predicate on the "action" field.
func ActionContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldAction, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v int) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldResourceID))
}

// ResourceTypeEQ applies the EQ predicate on the "resource_type" field.
func ResourceTypeEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEQ(FieldResourceType, v))
}

// ResourceTypeNEQ applies the NEQ predicate on the "resource_type" field.
func ResourceTypeNEQ(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNEQ(FieldResourceType, v))
}

// ResourceTypeIn applies the In predicate on the "resource_type" field.
func ResourceTypeIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIn(FieldResourceType, vs...))
}

// ResourceTypeNotIn applies the NotIn predicate on the "resource_type" field.
func ResourceTypeNotIn(vs ...string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotIn(FieldResourceType, vs...))
}

// ResourceTypeGT applies the GT predicate on the "resource_type" field.
func ResourceTypeGT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGT(FieldResourceType, v))
}

// ResourceTypeGTE applies the GTE predicate on the "resource_type" field.
func ResourceTypeGTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldGTE(FieldResourceType, v))
}

// ResourceTypeLT applies the LT predicate on the "resource_type" field.
func ResourceTypeLT(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLT(FieldResourceType, v))
}

// ResourceTypeLTE applies the LTE predicate on the "resource_type" field.
func ResourceTypeLTE(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldLTE(FieldResourceType, v))
}

// ResourceTypeContains applies the Contains predicate on the "resource_type" field.
func ResourceTypeContains(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContains(FieldResourceType, v))
}

// ResourceTypeHasPrefix applies the HasPrefix predicate on the "resource_type" field.
func ResourceTypeHasPrefix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasPrefix(FieldResourceType, v))
}

// ResourceTypeHasSuffix applies the HasSuffix predicate on the "resource_type" field.
func ResourceTypeHasSuffix(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldHasSuffix(FieldResourceType, v))
}

// ResourceTypeIsNil applies the IsNil predicate on the "resource_type" field.
func ResourceTypeIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldResourceType))
}

// ResourceTypeNotNil applies the NotNil predicate on the "resource_type" field.
func ResourceTypeNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldResourceType))
}

// ResourceTypeEqualFold applies the EqualFold predicate on the "resource_type" field.
func ResourceTypeEqualFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldEqualFold(FieldResourceType, v))
}

// ResourceTypeContainsFold applies the ContainsFold predicate on the "resource_type" field.
func ResourceTypeContainsFold(v string) predicate.AuditLog {
	return predicate.AuditLog(sql.FieldContainsFold(FieldResourceType, v))
}

// DetailsIsNil applies the IsNil predicate on the "details" field.
func DetailsIsNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldIsNull(FieldDetails))
}

// DetailsNotNil applies the NotNil predicate on the "details" field.
func DetailsNotNil() predicate.AuditLog {
	return predicate.AuditLog(sql.FieldNotNull(FieldDetails))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AuditLog {
	return predicate.AuditLog(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AuditLog {
	return predicate.AuditLog(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AuditLog) predicate.AuditLog {
	return predicate.AuditLog(sql.NotPredicates(p))
}
