// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/accesspolicy"
	"github.com/willie-lin/cloud-terminal/app/database/ent/account"
	"github.com/willie-lin/cloud-terminal/app/database/ent/permission"
	"github.com/willie-lin/cloud-terminal/app/database/ent/resource"
	"github.com/willie-lin/cloud-terminal/app/database/ent/role"
	"github.com/willie-lin/cloud-terminal/app/database/ent/user"
)

// AccessPolicyCreate is the builder for creating a AccessPolicy entity.
type AccessPolicyCreate struct {
	config
	mutation *AccessPolicyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (apc *AccessPolicyCreate) SetCreatedAt(t time.Time) *AccessPolicyCreate {
	apc.mutation.SetCreatedAt(t)
	return apc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (apc *AccessPolicyCreate) SetNillableCreatedAt(t *time.Time) *AccessPolicyCreate {
	if t != nil {
		apc.SetCreatedAt(*t)
	}
	return apc
}

// SetUpdatedAt sets the "updated_at" field.
func (apc *AccessPolicyCreate) SetUpdatedAt(t time.Time) *AccessPolicyCreate {
	apc.mutation.SetUpdatedAt(t)
	return apc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (apc *AccessPolicyCreate) SetNillableUpdatedAt(t *time.Time) *AccessPolicyCreate {
	if t != nil {
		apc.SetUpdatedAt(*t)
	}
	return apc
}

// SetName sets the "name" field.
func (apc *AccessPolicyCreate) SetName(s string) *AccessPolicyCreate {
	apc.mutation.SetName(s)
	return apc
}

// SetDescription sets the "description" field.
func (apc *AccessPolicyCreate) SetDescription(s string) *AccessPolicyCreate {
	apc.mutation.SetDescription(s)
	return apc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apc *AccessPolicyCreate) SetNillableDescription(s *string) *AccessPolicyCreate {
	if s != nil {
		apc.SetDescription(*s)
	}
	return apc
}

// SetEffect sets the "effect" field.
func (apc *AccessPolicyCreate) SetEffect(a accesspolicy.Effect) *AccessPolicyCreate {
	apc.mutation.SetEffect(a)
	return apc
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (apc *AccessPolicyCreate) SetNillableEffect(a *accesspolicy.Effect) *AccessPolicyCreate {
	if a != nil {
		apc.SetEffect(*a)
	}
	return apc
}

// SetResourceType sets the "resource_type" field.
func (apc *AccessPolicyCreate) SetResourceType(s string) *AccessPolicyCreate {
	apc.mutation.SetResourceType(s)
	return apc
}

// SetAction sets the "action" field.
func (apc *AccessPolicyCreate) SetAction(s string) *AccessPolicyCreate {
	apc.mutation.SetAction(s)
	return apc
}

// SetID sets the "id" field.
func (apc *AccessPolicyCreate) SetID(u uuid.UUID) *AccessPolicyCreate {
	apc.mutation.SetID(u)
	return apc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (apc *AccessPolicyCreate) SetNillableID(u *uuid.UUID) *AccessPolicyCreate {
	if u != nil {
		apc.SetID(*u)
	}
	return apc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (apc *AccessPolicyCreate) SetAccountID(id uuid.UUID) *AccessPolicyCreate {
	apc.mutation.SetAccountID(id)
	return apc
}

// SetAccount sets the "account" edge to the Account entity.
func (apc *AccessPolicyCreate) SetAccount(a *Account) *AccessPolicyCreate {
	return apc.SetAccountID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (apc *AccessPolicyCreate) AddRoleIDs(ids ...uuid.UUID) *AccessPolicyCreate {
	apc.mutation.AddRoleIDs(ids...)
	return apc
}

// AddRoles adds the "roles" edges to the Role entity.
func (apc *AccessPolicyCreate) AddRoles(r ...*Role) *AccessPolicyCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apc.AddRoleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (apc *AccessPolicyCreate) AddResourceIDs(ids ...uuid.UUID) *AccessPolicyCreate {
	apc.mutation.AddResourceIDs(ids...)
	return apc
}

// AddResources adds the "resources" edges to the Resource entity.
func (apc *AccessPolicyCreate) AddResources(r ...*Resource) *AccessPolicyCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apc.AddResourceIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (apc *AccessPolicyCreate) AddPermissionIDs(ids ...uuid.UUID) *AccessPolicyCreate {
	apc.mutation.AddPermissionIDs(ids...)
	return apc
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (apc *AccessPolicyCreate) AddPermissions(p ...*Permission) *AccessPolicyCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apc.AddPermissionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (apc *AccessPolicyCreate) AddUserIDs(ids ...uuid.UUID) *AccessPolicyCreate {
	apc.mutation.AddUserIDs(ids...)
	return apc
}

// AddUsers adds the "users" edges to the User entity.
func (apc *AccessPolicyCreate) AddUsers(u ...*User) *AccessPolicyCreate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apc.AddUserIDs(ids...)
}

// Mutation returns the AccessPolicyMutation object of the builder.
func (apc *AccessPolicyCreate) Mutation() *AccessPolicyMutation {
	return apc.mutation
}

// Save creates the AccessPolicy in the database.
func (apc *AccessPolicyCreate) Save(ctx context.Context) (*AccessPolicy, error) {
	apc.defaults()
	return withHooks(ctx, apc.sqlSave, apc.mutation, apc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AccessPolicyCreate) SaveX(ctx context.Context) *AccessPolicy {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AccessPolicyCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AccessPolicyCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AccessPolicyCreate) defaults() {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		v := accesspolicy.DefaultCreatedAt()
		apc.mutation.SetCreatedAt(v)
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		v := accesspolicy.DefaultUpdatedAt()
		apc.mutation.SetUpdatedAt(v)
	}
	if _, ok := apc.mutation.Effect(); !ok {
		v := accesspolicy.DefaultEffect
		apc.mutation.SetEffect(v)
	}
	if _, ok := apc.mutation.ID(); !ok {
		v := accesspolicy.DefaultID()
		apc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AccessPolicyCreate) check() error {
	if _, ok := apc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccessPolicy.created_at"`)}
	}
	if _, ok := apc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccessPolicy.updated_at"`)}
	}
	if _, ok := apc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AccessPolicy.name"`)}
	}
	if v, ok := apc.mutation.Name(); ok {
		if err := accesspolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.name": %w`, err)}
		}
	}
	if _, ok := apc.mutation.Effect(); !ok {
		return &ValidationError{Name: "effect", err: errors.New(`ent: missing required field "AccessPolicy.effect"`)}
	}
	if v, ok := apc.mutation.Effect(); ok {
		if err := accesspolicy.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.effect": %w`, err)}
		}
	}
	if _, ok := apc.mutation.ResourceType(); !ok {
		return &ValidationError{Name: "resource_type", err: errors.New(`ent: missing required field "AccessPolicy.resource_type"`)}
	}
	if v, ok := apc.mutation.ResourceType(); ok {
		if err := accesspolicy.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.resource_type": %w`, err)}
		}
	}
	if _, ok := apc.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`ent: missing required field "AccessPolicy.action"`)}
	}
	if v, ok := apc.mutation.Action(); ok {
		if err := accesspolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.action": %w`, err)}
		}
	}
	if len(apc.mutation.AccountIDs()) == 0 {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required edge "AccessPolicy.account"`)}
	}
	return nil
}

func (apc *AccessPolicyCreate) sqlSave(ctx context.Context) (*AccessPolicy, error) {
	if err := apc.check(); err != nil {
		return nil, err
	}
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	apc.mutation.id = &_node.ID
	apc.mutation.done = true
	return _node, nil
}

func (apc *AccessPolicyCreate) createSpec() (*AccessPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessPolicy{config: apc.config}
		_spec = sqlgraph.NewCreateSpec(accesspolicy.Table, sqlgraph.NewFieldSpec(accesspolicy.FieldID, field.TypeUUID))
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := apc.mutation.CreatedAt(); ok {
		_spec.SetField(accesspolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := apc.mutation.UpdatedAt(); ok {
		_spec.SetField(accesspolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := apc.mutation.Name(); ok {
		_spec.SetField(accesspolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := apc.mutation.Description(); ok {
		_spec.SetField(accesspolicy.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := apc.mutation.Effect(); ok {
		_spec.SetField(accesspolicy.FieldEffect, field.TypeEnum, value)
		_node.Effect = value
	}
	if value, ok := apc.mutation.ResourceType(); ok {
		_spec.SetField(accesspolicy.FieldResourceType, field.TypeString, value)
		_node.ResourceType = value
	}
	if value, ok := apc.mutation.Action(); ok {
		_spec.SetField(accesspolicy.FieldAction, field.TypeString, value)
		_node.Action = value
	}
	if nodes := apc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesspolicy.AccountTable,
			Columns: []string{accesspolicy.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_access_policies = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := apc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessPolicyCreateBulk is the builder for creating many AccessPolicy entities in bulk.
type AccessPolicyCreateBulk struct {
	config
	err      error
	builders []*AccessPolicyCreate
}

// Save creates the AccessPolicy entities in the database.
func (apcb *AccessPolicyCreateBulk) Save(ctx context.Context) ([]*AccessPolicy, error) {
	if apcb.err != nil {
		return nil, apcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AccessPolicy, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AccessPolicyCreateBulk) SaveX(ctx context.Context) []*AccessPolicy {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AccessPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AccessPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
