// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/auditlog"
	"github.com/willie-lin/cloud-terminal/app/database/ent/predicate"
	"github.com/willie-lin/cloud-terminal/app/database/ent/user"
)

// AuditLogUpdate is the builder for updating AuditLog entities.
type AuditLogUpdate struct {
	config
	hooks    []Hook
	mutation *AuditLogMutation
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (alu *AuditLogUpdate) Where(ps ...predicate.AuditLog) *AuditLogUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *AuditLogUpdate) SetUpdatedAt(t time.Time) *AuditLogUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// SetTimestamp sets the "timestamp" field.
func (alu *AuditLogUpdate) SetTimestamp(t time.Time) *AuditLogUpdate {
	alu.mutation.SetTimestamp(t)
	return alu
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableTimestamp(t *time.Time) *AuditLogUpdate {
	if t != nil {
		alu.SetTimestamp(*t)
	}
	return alu
}

// SetOperation sets the "operation" field.
func (alu *AuditLogUpdate) SetOperation(s string) *AuditLogUpdate {
	alu.mutation.SetOperation(s)
	return alu
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (alu *AuditLogUpdate) SetNillableOperation(s *string) *AuditLogUpdate {
	if s != nil {
		alu.SetOperation(*s)
	}
	return alu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (alu *AuditLogUpdate) AddUserIDs(ids ...uuid.UUID) *AuditLogUpdate {
	alu.mutation.AddUserIDs(ids...)
	return alu
}

// AddUser adds the "user" edges to the User entity.
func (alu *AuditLogUpdate) AddUser(u ...*User) *AuditLogUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return alu.AddUserIDs(ids...)
}

// Mutation returns the AuditLogMutation object of the builder.
func (alu *AuditLogUpdate) Mutation() *AuditLogMutation {
	return alu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (alu *AuditLogUpdate) ClearUser() *AuditLogUpdate {
	alu.mutation.ClearUser()
	return alu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (alu *AuditLogUpdate) RemoveUserIDs(ids ...uuid.UUID) *AuditLogUpdate {
	alu.mutation.RemoveUserIDs(ids...)
	return alu
}

// RemoveUser removes "user" edges to User entities.
func (alu *AuditLogUpdate) RemoveUser(u ...*User) *AuditLogUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return alu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AuditLogUpdate) Save(ctx context.Context) (int, error) {
	alu.defaults()
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AuditLogUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AuditLogUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AuditLogUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *AuditLogUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := auditlog.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

func (alu *AuditLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.Timestamp(); ok {
		_spec.SetField(auditlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := alu.mutation.Operation(); ok {
		_spec.SetField(auditlog.FieldOperation, field.TypeString, value)
	}
	if alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.RemovedUserIDs(); len(nodes) > 0 && !alu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AuditLogUpdateOne is the builder for updating a single AuditLog entity.
type AuditLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuditLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *AuditLogUpdateOne) SetUpdatedAt(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// SetTimestamp sets the "timestamp" field.
func (aluo *AuditLogUpdateOne) SetTimestamp(t time.Time) *AuditLogUpdateOne {
	aluo.mutation.SetTimestamp(t)
	return aluo
}

// SetNillableTimestamp sets the "timestamp" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableTimestamp(t *time.Time) *AuditLogUpdateOne {
	if t != nil {
		aluo.SetTimestamp(*t)
	}
	return aluo
}

// SetOperation sets the "operation" field.
func (aluo *AuditLogUpdateOne) SetOperation(s string) *AuditLogUpdateOne {
	aluo.mutation.SetOperation(s)
	return aluo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (aluo *AuditLogUpdateOne) SetNillableOperation(s *string) *AuditLogUpdateOne {
	if s != nil {
		aluo.SetOperation(*s)
	}
	return aluo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (aluo *AuditLogUpdateOne) AddUserIDs(ids ...uuid.UUID) *AuditLogUpdateOne {
	aluo.mutation.AddUserIDs(ids...)
	return aluo
}

// AddUser adds the "user" edges to the User entity.
func (aluo *AuditLogUpdateOne) AddUser(u ...*User) *AuditLogUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aluo.AddUserIDs(ids...)
}

// Mutation returns the AuditLogMutation object of the builder.
func (aluo *AuditLogUpdateOne) Mutation() *AuditLogMutation {
	return aluo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (aluo *AuditLogUpdateOne) ClearUser() *AuditLogUpdateOne {
	aluo.mutation.ClearUser()
	return aluo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (aluo *AuditLogUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *AuditLogUpdateOne {
	aluo.mutation.RemoveUserIDs(ids...)
	return aluo
}

// RemoveUser removes "user" edges to User entities.
func (aluo *AuditLogUpdateOne) RemoveUser(u ...*User) *AuditLogUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aluo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the AuditLogUpdate builder.
func (aluo *AuditLogUpdateOne) Where(ps ...predicate.AuditLog) *AuditLogUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AuditLogUpdateOne) Select(field string, fields ...string) *AuditLogUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AuditLog entity.
func (aluo *AuditLogUpdateOne) Save(ctx context.Context) (*AuditLog, error) {
	aluo.defaults()
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) SaveX(ctx context.Context) *AuditLog {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AuditLogUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AuditLogUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *AuditLogUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := auditlog.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

func (aluo *AuditLogUpdateOne) sqlSave(ctx context.Context) (_node *AuditLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(auditlog.Table, auditlog.Columns, sqlgraph.NewFieldSpec(auditlog.FieldID, field.TypeUUID))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuditLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, auditlog.FieldID)
		for _, f := range fields {
			if !auditlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != auditlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(auditlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.Timestamp(); ok {
		_spec.SetField(auditlog.FieldTimestamp, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.Operation(); ok {
		_spec.SetField(auditlog.FieldOperation, field.TypeString, value)
	}
	if aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.RemovedUserIDs(); len(nodes) > 0 && !aluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   auditlog.UserTable,
			Columns: auditlog.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AuditLog{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{auditlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
