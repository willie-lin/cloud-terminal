// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/accesspolicy"
	"github.com/willie-lin/cloud-terminal/app/database/ent/account"
)

// AccessPolicy is the model entity for the AccessPolicy schema.
type AccessPolicy struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Effect holds the value of the "effect" field.
	Effect accesspolicy.Effect `json:"effect,omitempty"`
	// ResourceType holds the value of the "resource_type" field.
	ResourceType string `json:"resource_type,omitempty"`
	// Action holds the value of the "action" field.
	Action string `json:"action,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessPolicyQuery when eager-loading is set.
	Edges                   AccessPolicyEdges `json:"edges"`
	account_access_policies *uuid.UUID
	selectValues            sql.SelectValues
}

// AccessPolicyEdges holds the relations/edges for other nodes in the graph.
type AccessPolicyEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// Resources holds the value of the resources edge.
	Resources []*Resource `json:"resources,omitempty"`
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessPolicyEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e AccessPolicyEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[1] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// ResourcesOrErr returns the Resources value or an error if the edge
// was not loaded in eager-loading.
func (e AccessPolicyEdges) ResourcesOrErr() ([]*Resource, error) {
	if e.loadedTypes[2] {
		return e.Resources, nil
	}
	return nil, &NotLoadedError{edge: "resources"}
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e AccessPolicyEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[3] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AccessPolicyEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessPolicy) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesspolicy.FieldName, accesspolicy.FieldDescription, accesspolicy.FieldEffect, accesspolicy.FieldResourceType, accesspolicy.FieldAction:
			values[i] = new(sql.NullString)
		case accesspolicy.FieldCreatedAt, accesspolicy.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case accesspolicy.FieldID:
			values[i] = new(uuid.UUID)
		case accesspolicy.ForeignKeys[0]: // account_access_policies
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessPolicy fields.
func (ap *AccessPolicy) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesspolicy.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ap.ID = *value
			}
		case accesspolicy.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ap.CreatedAt = value.Time
			}
		case accesspolicy.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ap.UpdatedAt = value.Time
			}
		case accesspolicy.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ap.Name = value.String
			}
		case accesspolicy.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ap.Description = value.String
			}
		case accesspolicy.FieldEffect:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field effect", values[i])
			} else if value.Valid {
				ap.Effect = accesspolicy.Effect(value.String)
			}
		case accesspolicy.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				ap.ResourceType = value.String
			}
		case accesspolicy.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				ap.Action = value.String
			}
		case accesspolicy.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field account_access_policies", values[i])
			} else if value.Valid {
				ap.account_access_policies = new(uuid.UUID)
				*ap.account_access_policies = *value.S.(*uuid.UUID)
			}
		default:
			ap.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessPolicy.
// This includes values selected through modifiers, order, etc.
func (ap *AccessPolicy) Value(name string) (ent.Value, error) {
	return ap.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the AccessPolicy entity.
func (ap *AccessPolicy) QueryAccount() *AccountQuery {
	return NewAccessPolicyClient(ap.config).QueryAccount(ap)
}

// QueryRoles queries the "roles" edge of the AccessPolicy entity.
func (ap *AccessPolicy) QueryRoles() *RoleQuery {
	return NewAccessPolicyClient(ap.config).QueryRoles(ap)
}

// QueryResources queries the "resources" edge of the AccessPolicy entity.
func (ap *AccessPolicy) QueryResources() *ResourceQuery {
	return NewAccessPolicyClient(ap.config).QueryResources(ap)
}

// QueryPermissions queries the "permissions" edge of the AccessPolicy entity.
func (ap *AccessPolicy) QueryPermissions() *PermissionQuery {
	return NewAccessPolicyClient(ap.config).QueryPermissions(ap)
}

// QueryUsers queries the "users" edge of the AccessPolicy entity.
func (ap *AccessPolicy) QueryUsers() *UserQuery {
	return NewAccessPolicyClient(ap.config).QueryUsers(ap)
}

// Update returns a builder for updating this AccessPolicy.
// Note that you need to call AccessPolicy.Unwrap() before calling this method if this AccessPolicy
// was returned from a transaction, and the transaction was committed or rolled back.
func (ap *AccessPolicy) Update() *AccessPolicyUpdateOne {
	return NewAccessPolicyClient(ap.config).UpdateOne(ap)
}

// Unwrap unwraps the AccessPolicy entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ap *AccessPolicy) Unwrap() *AccessPolicy {
	_tx, ok := ap.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessPolicy is not a transactional entity")
	}
	ap.config.driver = _tx.drv
	return ap
}

// String implements the fmt.Stringer.
func (ap *AccessPolicy) String() string {
	var builder strings.Builder
	builder.WriteString("AccessPolicy(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ap.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ap.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ap.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ap.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ap.Description)
	builder.WriteString(", ")
	builder.WriteString("effect=")
	builder.WriteString(fmt.Sprintf("%v", ap.Effect))
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(ap.ResourceType)
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(ap.Action)
	builder.WriteByte(')')
	return builder.String()
}

// AccessPolicies is a parsable slice of AccessPolicy.
type AccessPolicies []*AccessPolicy
