// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldNickname holds the string denoting the nickname field in the database.
	FieldNickname = "nickname"
	// FieldTotpSecret holds the string denoting the totp_secret field in the database.
	FieldTotpSecret = "totp_secret"
	// FieldOnline holds the string denoting the online field in the database.
	FieldOnline = "online"
	// FieldEnableType holds the string denoting the enable_type field in the database.
	FieldEnableType = "enable_type"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldLastLoginTime holds the string denoting the last_login_time field in the database.
	FieldLastLoginTime = "last_login_time"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUsername,
	FieldPassword,
	FieldEmail,
	FieldNickname,
	FieldTotpSecret,
	FieldOnline,
	FieldEnableType,
	FieldUserType,
	FieldLastLoginTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultOnline holds the default value on creation for the "online" field.
	DefaultOnline bool
	// DefaultLastLoginTime holds the default value on creation for the "last_login_time" field.
	DefaultLastLoginTime func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// EnableType defines the type for the "enable_type" enum field.
type EnableType string

// EnableTypeEnabled is the default value of the EnableType enum.
const DefaultEnableType = EnableTypeEnabled

// EnableType values.
const (
	EnableTypeEnabled  EnableType = "Enabled"
	EnableTypeDisabled EnableType = "Disabled"
)

func (et EnableType) String() string {
	return string(et)
}

// EnableTypeValidator is a validator for the "enable_type" field enum values. It is called by the builders before save.
func EnableTypeValidator(et EnableType) error {
	switch et {
	case EnableTypeEnabled, EnableTypeDisabled:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for enable_type field: %q", et)
	}
}

// UserType defines the type for the "user_type" enum field.
type UserType string

// UserTypeUser is the default value of the UserType enum.
const DefaultUserType = UserTypeUser

// UserType values.
const (
	UserTypeAdmin     UserType = "Admin"
	UserTypeAuditor   UserType = "Auditor"
	UserTypeSuperUser UserType = "SuperUser"
	UserTypeUser      UserType = "User"
)

func (ut UserType) String() string {
	return string(ut)
}

// UserTypeValidator is a validator for the "user_type" field enum values. It is called by the builders before save.
func UserTypeValidator(ut UserType) error {
	switch ut {
	case UserTypeAdmin, UserTypeAuditor, UserTypeSuperUser, UserTypeUser:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for user_type field: %q", ut)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByNickname orders the results by the nickname field.
func ByNickname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNickname, opts...).ToFunc()
}

// ByTotpSecret orders the results by the totp_secret field.
func ByTotpSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotpSecret, opts...).ToFunc()
}

// ByOnline orders the results by the online field.
func ByOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnline, opts...).ToFunc()
}

// ByEnableType orders the results by the enable_type field.
func ByEnableType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnableType, opts...).ToFunc()
}

// ByUserType orders the results by the user_type field.
func ByUserType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserType, opts...).ToFunc()
}

// ByLastLoginTime orders the results by the last_login_time field.
func ByLastLoginTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastLoginTime, opts...).ToFunc()
}
