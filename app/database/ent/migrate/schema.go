// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessPoliciesColumns holds the columns for the "access_policies" table.
	AccessPoliciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "effect", Type: field.TypeEnum, Enums: []string{"allow", "deny"}, Default: "allow"},
		{Name: "statements", Type: field.TypeJSON},
		{Name: "resource_type", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "immutable", Type: field.TypeBool, Default: false},
	}
	// AccessPoliciesTable holds the schema information for the "access_policies" table.
	AccessPoliciesTable = &schema.Table{
		Name:       "access_policies",
		Columns:    AccessPoliciesColumns,
		PrimaryKey: []*schema.Column{AccessPoliciesColumns[0]},
	}
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "suspended", "deleted"}, Default: "active"},
		{Name: "tenant_accounts", Type: field.TypeUUID},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "accounts_tenants_accounts",
				Columns:    []*schema.Column{AccountsColumns[5]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// AuditLogsColumns holds the columns for the "audit_logs" table.
	AuditLogsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "timestamp", Type: field.TypeTime},
		{Name: "actor_id", Type: field.TypeInt},
		{Name: "actor_username", Type: field.TypeString},
		{Name: "action", Type: field.TypeString},
		{Name: "resource_id", Type: field.TypeInt, Nullable: true},
		{Name: "resource_type", Type: field.TypeString, Nullable: true},
		{Name: "details", Type: field.TypeJSON, Nullable: true},
	}
	// AuditLogsTable holds the schema information for the "audit_logs" table.
	AuditLogsTable = &schema.Table{
		Name:       "audit_logs",
		Columns:    AuditLogsColumns,
		PrimaryKey: []*schema.Column{AuditLogsColumns[0]},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "actions", Type: field.TypeJSON},
		{Name: "resource_type", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "role_permissions", Type: field.TypeUUID, Nullable: true},
		{Name: "tenant_permissions", Type: field.TypeUUID},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permissions_roles_permissions",
				Columns:    []*schema.Column{PermissionsColumns[8]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "permissions_tenants_permissions",
				Columns:    []*schema.Column{PermissionsColumns[9]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "permission_name",
				Unique:  true,
				Columns: []*schema.Column{PermissionsColumns[3]},
			},
		},
	}
	// PlatformsColumns holds the columns for the "platforms" table.
	PlatformsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "region", Type: field.TypeString, Nullable: true},
		{Name: "version", Type: field.TypeString, Nullable: true},
	}
	// PlatformsTable holds the schema information for the "platforms" table.
	PlatformsTable = &schema.Table{
		Name:       "platforms",
		Columns:    PlatformsColumns,
		PrimaryKey: []*schema.Column{PlatformsColumns[0]},
	}
	// ResourcesColumns holds the columns for the "resources" table.
	ResourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "properties", Type: field.TypeJSON, Nullable: true},
		{Name: "value", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
	}
	// ResourcesTable holds the schema information for the "resources" table.
	ResourcesTable = &schema.Table{
		Name:       "resources",
		Columns:    ResourcesColumns,
		PrimaryKey: []*schema.Column{ResourcesColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "resource_name",
				Unique:  true,
				Columns: []*schema.Column{ResourcesColumns[3]},
			},
		},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "is_disabled", Type: field.TypeBool, Default: false},
		{Name: "is_default", Type: field.TypeBool, Default: false},
		{Name: "permission_roles", Type: field.TypeUUID, Nullable: true},
		{Name: "user_roles", Type: field.TypeUUID, Nullable: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "roles_permissions_roles",
				Columns:    []*schema.Column{RolesColumns[7]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "roles_users_roles",
				Columns:    []*schema.Column{RolesColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "role_name",
				Unique:  true,
				Columns: []*schema.Column{RolesColumns[3]},
			},
		},
	}
	// TenantsColumns holds the columns for the "tenants" table.
	TenantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "suspended"}, Default: "active"},
		{Name: "platform_tenants", Type: field.TypeUUID},
	}
	// TenantsTable holds the schema information for the "tenants" table.
	TenantsTable = &schema.Table{
		Name:       "tenants",
		Columns:    TenantsColumns,
		PrimaryKey: []*schema.Column{TenantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenants_platforms_tenants",
				Columns:    []*schema.Column{TenantsColumns[6]},
				RefColumns: []*schema.Column{PlatformsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "tenant_name",
				Unique:  true,
				Columns: []*schema.Column{TenantsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "avatar", Type: field.TypeString, Nullable: true},
		{Name: "nickname", Type: field.TypeString, Unique: true, Nullable: true, Size: 30},
		{Name: "bio", Type: field.TypeString, Nullable: true, Size: 200},
		{Name: "username", Type: field.TypeString, Unique: true, Size: 30},
		{Name: "password", Type: field.TypeString, Size: 120},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "phone_number", Type: field.TypeString, Nullable: true, Default: ""},
		{Name: "totp_secret", Type: field.TypeString, Nullable: true},
		{Name: "online", Type: field.TypeBool, Default: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"active", "inactive", "blocked"}, Default: "active"},
		{Name: "last_login_time", Type: field.TypeTime},
		{Name: "account_users", Type: field.TypeUUID},
		{Name: "role_users", Type: field.TypeUUID, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_accounts_users",
				Columns:    []*schema.Column{UsersColumns[14]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "users_roles_users",
				Columns:    []*schema.Column{UsersColumns[15]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "user_username",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[6]},
			},
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[8]},
			},
		},
	}
	// AccountResourcesColumns holds the columns for the "account_resources" table.
	AccountResourcesColumns = []*schema.Column{
		{Name: "account_id", Type: field.TypeUUID},
		{Name: "resource_id", Type: field.TypeUUID},
	}
	// AccountResourcesTable holds the schema information for the "account_resources" table.
	AccountResourcesTable = &schema.Table{
		Name:       "account_resources",
		Columns:    AccountResourcesColumns,
		PrimaryKey: []*schema.Column{AccountResourcesColumns[0], AccountResourcesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "account_resources_account_id",
				Columns:    []*schema.Column{AccountResourcesColumns[0]},
				RefColumns: []*schema.Column{AccountsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "account_resources_resource_id",
				Columns:    []*schema.Column{AccountResourcesColumns[1]},
				RefColumns: []*schema.Column{ResourcesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RoleChildRolesColumns holds the columns for the "role_child_roles" table.
	RoleChildRolesColumns = []*schema.Column{
		{Name: "role_id", Type: field.TypeUUID},
		{Name: "parent_role_id", Type: field.TypeUUID},
	}
	// RoleChildRolesTable holds the schema information for the "role_child_roles" table.
	RoleChildRolesTable = &schema.Table{
		Name:       "role_child_roles",
		Columns:    RoleChildRolesColumns,
		PrimaryKey: []*schema.Column{RoleChildRolesColumns[0], RoleChildRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "role_child_roles_role_id",
				Columns:    []*schema.Column{RoleChildRolesColumns[0]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "role_child_roles_parent_role_id",
				Columns:    []*schema.Column{RoleChildRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TenantRolesColumns holds the columns for the "tenant_roles" table.
	TenantRolesColumns = []*schema.Column{
		{Name: "tenant_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
	}
	// TenantRolesTable holds the schema information for the "tenant_roles" table.
	TenantRolesTable = &schema.Table{
		Name:       "tenant_roles",
		Columns:    TenantRolesColumns,
		PrimaryKey: []*schema.Column{TenantRolesColumns[0], TenantRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_roles_tenant_id",
				Columns:    []*schema.Column{TenantRolesColumns[0]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tenant_roles_role_id",
				Columns:    []*schema.Column{TenantRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TenantAccessPoliciesColumns holds the columns for the "tenant_access_policies" table.
	TenantAccessPoliciesColumns = []*schema.Column{
		{Name: "tenant_id", Type: field.TypeUUID},
		{Name: "access_policy_id", Type: field.TypeUUID},
	}
	// TenantAccessPoliciesTable holds the schema information for the "tenant_access_policies" table.
	TenantAccessPoliciesTable = &schema.Table{
		Name:       "tenant_access_policies",
		Columns:    TenantAccessPoliciesColumns,
		PrimaryKey: []*schema.Column{TenantAccessPoliciesColumns[0], TenantAccessPoliciesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tenant_access_policies_tenant_id",
				Columns:    []*schema.Column{TenantAccessPoliciesColumns[0]},
				RefColumns: []*schema.Column{TenantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tenant_access_policies_access_policy_id",
				Columns:    []*schema.Column{TenantAccessPoliciesColumns[1]},
				RefColumns: []*schema.Column{AccessPoliciesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserAuditLogsColumns holds the columns for the "user_audit_logs" table.
	UserAuditLogsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "audit_log_id", Type: field.TypeUUID},
	}
	// UserAuditLogsTable holds the schema information for the "user_audit_logs" table.
	UserAuditLogsTable = &schema.Table{
		Name:       "user_audit_logs",
		Columns:    UserAuditLogsColumns,
		PrimaryKey: []*schema.Column{UserAuditLogsColumns[0], UserAuditLogsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_audit_logs_user_id",
				Columns:    []*schema.Column{UserAuditLogsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_audit_logs_audit_log_id",
				Columns:    []*schema.Column{UserAuditLogsColumns[1]},
				RefColumns: []*schema.Column{AuditLogsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessPoliciesTable,
		AccountsTable,
		AuditLogsTable,
		PermissionsTable,
		PlatformsTable,
		ResourcesTable,
		RolesTable,
		TenantsTable,
		UsersTable,
		AccountResourcesTable,
		RoleChildRolesTable,
		TenantRolesTable,
		TenantAccessPoliciesTable,
		UserAuditLogsTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = TenantsTable
	PermissionsTable.ForeignKeys[0].RefTable = RolesTable
	PermissionsTable.ForeignKeys[1].RefTable = TenantsTable
	RolesTable.ForeignKeys[0].RefTable = PermissionsTable
	RolesTable.ForeignKeys[1].RefTable = UsersTable
	TenantsTable.ForeignKeys[0].RefTable = PlatformsTable
	UsersTable.ForeignKeys[0].RefTable = AccountsTable
	UsersTable.ForeignKeys[1].RefTable = RolesTable
	AccountResourcesTable.ForeignKeys[0].RefTable = AccountsTable
	AccountResourcesTable.ForeignKeys[1].RefTable = ResourcesTable
	RoleChildRolesTable.ForeignKeys[0].RefTable = RolesTable
	RoleChildRolesTable.ForeignKeys[1].RefTable = RolesTable
	TenantRolesTable.ForeignKeys[0].RefTable = TenantsTable
	TenantRolesTable.ForeignKeys[1].RefTable = RolesTable
	TenantAccessPoliciesTable.ForeignKeys[0].RefTable = TenantsTable
	TenantAccessPoliciesTable.ForeignKeys[1].RefTable = AccessPoliciesTable
	UserAuditLogsTable.ForeignKeys[0].RefTable = UsersTable
	UserAuditLogsTable.ForeignKeys[1].RefTable = AuditLogsTable
}
