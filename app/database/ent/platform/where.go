// Code generated by ent, DO NOT EDIT.

package platform

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldUpdatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldDescription, v))
}

// ContactEmail applies equality check predicate on the "contact_email" field. It's identical to ContactEmailEQ.
func ContactEmail(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldContactEmail, v))
}

// ContactPhone applies equality check predicate on the "contact_phone" field. It's identical to ContactPhoneEQ.
func ContactPhone(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldContactPhone, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Platform {
	return predicate.Platform(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Platform {
	return predicate.Platform(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldDescription, v))
}

// ContactEmailEQ applies the EQ predicate on the "contact_email" field.
func ContactEmailEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldContactEmail, v))
}

// ContactEmailNEQ applies the NEQ predicate on the "contact_email" field.
func ContactEmailNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldContactEmail, v))
}

// ContactEmailIn applies the In predicate on the "contact_email" field.
func ContactEmailIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldContactEmail, vs...))
}

// ContactEmailNotIn applies the NotIn predicate on the "contact_email" field.
func ContactEmailNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldContactEmail, vs...))
}

// ContactEmailGT applies the GT predicate on the "contact_email" field.
func ContactEmailGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldContactEmail, v))
}

// ContactEmailGTE applies the GTE predicate on the "contact_email" field.
func ContactEmailGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldContactEmail, v))
}

// ContactEmailLT applies the LT predicate on the "contact_email" field.
func ContactEmailLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldContactEmail, v))
}

// ContactEmailLTE applies the LTE predicate on the "contact_email" field.
func ContactEmailLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldContactEmail, v))
}

// ContactEmailContains applies the Contains predicate on the "contact_email" field.
func ContactEmailContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldContactEmail, v))
}

// ContactEmailHasPrefix applies the HasPrefix predicate on the "contact_email" field.
func ContactEmailHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldContactEmail, v))
}

// ContactEmailHasSuffix applies the HasSuffix predicate on the "contact_email" field.
func ContactEmailHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldContactEmail, v))
}

// ContactEmailIsNil applies the IsNil predicate on the "contact_email" field.
func ContactEmailIsNil() predicate.Platform {
	return predicate.Platform(sql.FieldIsNull(FieldContactEmail))
}

// ContactEmailNotNil applies the NotNil predicate on the "contact_email" field.
func ContactEmailNotNil() predicate.Platform {
	return predicate.Platform(sql.FieldNotNull(FieldContactEmail))
}

// ContactEmailEqualFold applies the EqualFold predicate on the "contact_email" field.
func ContactEmailEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldContactEmail, v))
}

// ContactEmailContainsFold applies the ContainsFold predicate on the "contact_email" field.
func ContactEmailContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldContactEmail, v))
}

// ContactPhoneEQ applies the EQ predicate on the "contact_phone" field.
func ContactPhoneEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEQ(FieldContactPhone, v))
}

// ContactPhoneNEQ applies the NEQ predicate on the "contact_phone" field.
func ContactPhoneNEQ(v string) predicate.Platform {
	return predicate.Platform(sql.FieldNEQ(FieldContactPhone, v))
}

// ContactPhoneIn applies the In predicate on the "contact_phone" field.
func ContactPhoneIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldIn(FieldContactPhone, vs...))
}

// ContactPhoneNotIn applies the NotIn predicate on the "contact_phone" field.
func ContactPhoneNotIn(vs ...string) predicate.Platform {
	return predicate.Platform(sql.FieldNotIn(FieldContactPhone, vs...))
}

// ContactPhoneGT applies the GT predicate on the "contact_phone" field.
func ContactPhoneGT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGT(FieldContactPhone, v))
}

// ContactPhoneGTE applies the GTE predicate on the "contact_phone" field.
func ContactPhoneGTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldGTE(FieldContactPhone, v))
}

// ContactPhoneLT applies the LT predicate on the "contact_phone" field.
func ContactPhoneLT(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLT(FieldContactPhone, v))
}

// ContactPhoneLTE applies the LTE predicate on the "contact_phone" field.
func ContactPhoneLTE(v string) predicate.Platform {
	return predicate.Platform(sql.FieldLTE(FieldContactPhone, v))
}

// ContactPhoneContains applies the Contains predicate on the "contact_phone" field.
func ContactPhoneContains(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContains(FieldContactPhone, v))
}

// ContactPhoneHasPrefix applies the HasPrefix predicate on the "contact_phone" field.
func ContactPhoneHasPrefix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasPrefix(FieldContactPhone, v))
}

// ContactPhoneHasSuffix applies the HasSuffix predicate on the "contact_phone" field.
func ContactPhoneHasSuffix(v string) predicate.Platform {
	return predicate.Platform(sql.FieldHasSuffix(FieldContactPhone, v))
}

// ContactPhoneIsNil applies the IsNil predicate on the "contact_phone" field.
func ContactPhoneIsNil() predicate.Platform {
	return predicate.Platform(sql.FieldIsNull(FieldContactPhone))
}

// ContactPhoneNotNil applies the NotNil predicate on the "contact_phone" field.
func ContactPhoneNotNil() predicate.Platform {
	return predicate.Platform(sql.FieldNotNull(FieldContactPhone))
}

// ContactPhoneEqualFold applies the EqualFold predicate on the "contact_phone" field.
func ContactPhoneEqualFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldEqualFold(FieldContactPhone, v))
}

// ContactPhoneContainsFold applies the ContainsFold predicate on the "contact_phone" field.
func ContactPhoneContainsFold(v string) predicate.Platform {
	return predicate.Platform(sql.FieldContainsFold(FieldContactPhone, v))
}

// HasTenants applies the HasEdge predicate on the "tenants" edge.
func HasTenants() predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TenantsTable, TenantsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantsWith applies the HasEdge predicate on the "tenants" edge with a given conditions (other predicates).
func HasTenantsWith(preds ...predicate.Tenant) predicate.Platform {
	return predicate.Platform(func(s *sql.Selector) {
		step := newTenantsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Platform) predicate.Platform {
	return predicate.Platform(sql.NotPredicates(p))
}
