// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/willie-lin/cloud-terminal/app/database/ent/accesspolicy"
	"github.com/willie-lin/cloud-terminal/app/database/ent/account"
	"github.com/willie-lin/cloud-terminal/app/database/ent/permission"
	"github.com/willie-lin/cloud-terminal/app/database/ent/predicate"
	"github.com/willie-lin/cloud-terminal/app/database/ent/resource"
	"github.com/willie-lin/cloud-terminal/app/database/ent/role"
	"github.com/willie-lin/cloud-terminal/app/database/ent/user"
)

// AccessPolicyUpdate is the builder for updating AccessPolicy entities.
type AccessPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *AccessPolicyMutation
}

// Where appends a list predicates to the AccessPolicyUpdate builder.
func (apu *AccessPolicyUpdate) Where(ps ...predicate.AccessPolicy) *AccessPolicyUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AccessPolicyUpdate) SetUpdatedAt(t time.Time) *AccessPolicyUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// SetName sets the "name" field.
func (apu *AccessPolicyUpdate) SetName(s string) *AccessPolicyUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *AccessPolicyUpdate) SetNillableName(s *string) *AccessPolicyUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// SetDescription sets the "description" field.
func (apu *AccessPolicyUpdate) SetDescription(s string) *AccessPolicyUpdate {
	apu.mutation.SetDescription(s)
	return apu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apu *AccessPolicyUpdate) SetNillableDescription(s *string) *AccessPolicyUpdate {
	if s != nil {
		apu.SetDescription(*s)
	}
	return apu
}

// ClearDescription clears the value of the "description" field.
func (apu *AccessPolicyUpdate) ClearDescription() *AccessPolicyUpdate {
	apu.mutation.ClearDescription()
	return apu
}

// SetEffect sets the "effect" field.
func (apu *AccessPolicyUpdate) SetEffect(a accesspolicy.Effect) *AccessPolicyUpdate {
	apu.mutation.SetEffect(a)
	return apu
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (apu *AccessPolicyUpdate) SetNillableEffect(a *accesspolicy.Effect) *AccessPolicyUpdate {
	if a != nil {
		apu.SetEffect(*a)
	}
	return apu
}

// SetResourceType sets the "resource_type" field.
func (apu *AccessPolicyUpdate) SetResourceType(s string) *AccessPolicyUpdate {
	apu.mutation.SetResourceType(s)
	return apu
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (apu *AccessPolicyUpdate) SetNillableResourceType(s *string) *AccessPolicyUpdate {
	if s != nil {
		apu.SetResourceType(*s)
	}
	return apu
}

// SetAction sets the "action" field.
func (apu *AccessPolicyUpdate) SetAction(s string) *AccessPolicyUpdate {
	apu.mutation.SetAction(s)
	return apu
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (apu *AccessPolicyUpdate) SetNillableAction(s *string) *AccessPolicyUpdate {
	if s != nil {
		apu.SetAction(*s)
	}
	return apu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (apu *AccessPolicyUpdate) SetAccountID(id uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.SetAccountID(id)
	return apu
}

// SetAccount sets the "account" edge to the Account entity.
func (apu *AccessPolicyUpdate) SetAccount(a *Account) *AccessPolicyUpdate {
	return apu.SetAccountID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (apu *AccessPolicyUpdate) AddRoleIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.AddRoleIDs(ids...)
	return apu
}

// AddRoles adds the "roles" edges to the Role entity.
func (apu *AccessPolicyUpdate) AddRoles(r ...*Role) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.AddRoleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (apu *AccessPolicyUpdate) AddResourceIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.AddResourceIDs(ids...)
	return apu
}

// AddResources adds the "resources" edges to the Resource entity.
func (apu *AccessPolicyUpdate) AddResources(r ...*Resource) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.AddResourceIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (apu *AccessPolicyUpdate) AddPermissionIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.AddPermissionIDs(ids...)
	return apu
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (apu *AccessPolicyUpdate) AddPermissions(p ...*Permission) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.AddPermissionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (apu *AccessPolicyUpdate) AddUserIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.AddUserIDs(ids...)
	return apu
}

// AddUsers adds the "users" edges to the User entity.
func (apu *AccessPolicyUpdate) AddUsers(u ...*User) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.AddUserIDs(ids...)
}

// Mutation returns the AccessPolicyMutation object of the builder.
func (apu *AccessPolicyUpdate) Mutation() *AccessPolicyMutation {
	return apu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (apu *AccessPolicyUpdate) ClearAccount() *AccessPolicyUpdate {
	apu.mutation.ClearAccount()
	return apu
}

// ClearRoles clears all "roles" edges to the Role entity.
func (apu *AccessPolicyUpdate) ClearRoles() *AccessPolicyUpdate {
	apu.mutation.ClearRoles()
	return apu
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (apu *AccessPolicyUpdate) RemoveRoleIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.RemoveRoleIDs(ids...)
	return apu
}

// RemoveRoles removes "roles" edges to Role entities.
func (apu *AccessPolicyUpdate) RemoveRoles(r ...*Role) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.RemoveRoleIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (apu *AccessPolicyUpdate) ClearResources() *AccessPolicyUpdate {
	apu.mutation.ClearResources()
	return apu
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (apu *AccessPolicyUpdate) RemoveResourceIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.RemoveResourceIDs(ids...)
	return apu
}

// RemoveResources removes "resources" edges to Resource entities.
func (apu *AccessPolicyUpdate) RemoveResources(r ...*Resource) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apu.RemoveResourceIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (apu *AccessPolicyUpdate) ClearPermissions() *AccessPolicyUpdate {
	apu.mutation.ClearPermissions()
	return apu
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (apu *AccessPolicyUpdate) RemovePermissionIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.RemovePermissionIDs(ids...)
	return apu
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (apu *AccessPolicyUpdate) RemovePermissions(p ...*Permission) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apu.RemovePermissionIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (apu *AccessPolicyUpdate) ClearUsers() *AccessPolicyUpdate {
	apu.mutation.ClearUsers()
	return apu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (apu *AccessPolicyUpdate) RemoveUserIDs(ids ...uuid.UUID) *AccessPolicyUpdate {
	apu.mutation.RemoveUserIDs(ids...)
	return apu
}

// RemoveUsers removes "users" edges to User entities.
func (apu *AccessPolicyUpdate) RemoveUsers(u ...*User) *AccessPolicyUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AccessPolicyUpdate) Save(ctx context.Context) (int, error) {
	apu.defaults()
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AccessPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AccessPolicyUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AccessPolicyUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AccessPolicyUpdate) defaults() {
	if _, ok := apu.mutation.UpdatedAt(); !ok {
		v := accesspolicy.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apu *AccessPolicyUpdate) check() error {
	if v, ok := apu.mutation.Name(); ok {
		if err := accesspolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.name": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Effect(); ok {
		if err := accesspolicy.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.effect": %w`, err)}
		}
	}
	if v, ok := apu.mutation.ResourceType(); ok {
		if err := accesspolicy.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.resource_type": %w`, err)}
		}
	}
	if v, ok := apu.mutation.Action(); ok {
		if err := accesspolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.action": %w`, err)}
		}
	}
	if apu.mutation.AccountCleared() && len(apu.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccessPolicy.account"`)
	}
	return nil
}

func (apu *AccessPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := apu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesspolicy.Table, accesspolicy.Columns, sqlgraph.NewFieldSpec(accesspolicy.FieldID, field.TypeUUID))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(accesspolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(accesspolicy.FieldName, field.TypeString, value)
	}
	if value, ok := apu.mutation.Description(); ok {
		_spec.SetField(accesspolicy.FieldDescription, field.TypeString, value)
	}
	if apu.mutation.DescriptionCleared() {
		_spec.ClearField(accesspolicy.FieldDescription, field.TypeString)
	}
	if value, ok := apu.mutation.Effect(); ok {
		_spec.SetField(accesspolicy.FieldEffect, field.TypeEnum, value)
	}
	if value, ok := apu.mutation.ResourceType(); ok {
		_spec.SetField(accesspolicy.FieldResourceType, field.TypeString, value)
	}
	if value, ok := apu.mutation.Action(); ok {
		_spec.SetField(accesspolicy.FieldAction, field.TypeString, value)
	}
	if apu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesspolicy.AccountTable,
			Columns: []string{accesspolicy.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesspolicy.AccountTable,
			Columns: []string{accesspolicy.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedRolesIDs(); len(nodes) > 0 && !apu.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !apu.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !apu.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !apu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesspolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AccessPolicyUpdateOne is the builder for updating a single AccessPolicy entity.
type AccessPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessPolicyMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AccessPolicyUpdateOne) SetUpdatedAt(t time.Time) *AccessPolicyUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// SetName sets the "name" field.
func (apuo *AccessPolicyUpdateOne) SetName(s string) *AccessPolicyUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *AccessPolicyUpdateOne) SetNillableName(s *string) *AccessPolicyUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// SetDescription sets the "description" field.
func (apuo *AccessPolicyUpdateOne) SetDescription(s string) *AccessPolicyUpdateOne {
	apuo.mutation.SetDescription(s)
	return apuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (apuo *AccessPolicyUpdateOne) SetNillableDescription(s *string) *AccessPolicyUpdateOne {
	if s != nil {
		apuo.SetDescription(*s)
	}
	return apuo
}

// ClearDescription clears the value of the "description" field.
func (apuo *AccessPolicyUpdateOne) ClearDescription() *AccessPolicyUpdateOne {
	apuo.mutation.ClearDescription()
	return apuo
}

// SetEffect sets the "effect" field.
func (apuo *AccessPolicyUpdateOne) SetEffect(a accesspolicy.Effect) *AccessPolicyUpdateOne {
	apuo.mutation.SetEffect(a)
	return apuo
}

// SetNillableEffect sets the "effect" field if the given value is not nil.
func (apuo *AccessPolicyUpdateOne) SetNillableEffect(a *accesspolicy.Effect) *AccessPolicyUpdateOne {
	if a != nil {
		apuo.SetEffect(*a)
	}
	return apuo
}

// SetResourceType sets the "resource_type" field.
func (apuo *AccessPolicyUpdateOne) SetResourceType(s string) *AccessPolicyUpdateOne {
	apuo.mutation.SetResourceType(s)
	return apuo
}

// SetNillableResourceType sets the "resource_type" field if the given value is not nil.
func (apuo *AccessPolicyUpdateOne) SetNillableResourceType(s *string) *AccessPolicyUpdateOne {
	if s != nil {
		apuo.SetResourceType(*s)
	}
	return apuo
}

// SetAction sets the "action" field.
func (apuo *AccessPolicyUpdateOne) SetAction(s string) *AccessPolicyUpdateOne {
	apuo.mutation.SetAction(s)
	return apuo
}

// SetNillableAction sets the "action" field if the given value is not nil.
func (apuo *AccessPolicyUpdateOne) SetNillableAction(s *string) *AccessPolicyUpdateOne {
	if s != nil {
		apuo.SetAction(*s)
	}
	return apuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (apuo *AccessPolicyUpdateOne) SetAccountID(id uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.SetAccountID(id)
	return apuo
}

// SetAccount sets the "account" edge to the Account entity.
func (apuo *AccessPolicyUpdateOne) SetAccount(a *Account) *AccessPolicyUpdateOne {
	return apuo.SetAccountID(a.ID)
}

// AddRoleIDs adds the "roles" edge to the Role entity by IDs.
func (apuo *AccessPolicyUpdateOne) AddRoleIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.AddRoleIDs(ids...)
	return apuo
}

// AddRoles adds the "roles" edges to the Role entity.
func (apuo *AccessPolicyUpdateOne) AddRoles(r ...*Role) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.AddRoleIDs(ids...)
}

// AddResourceIDs adds the "resources" edge to the Resource entity by IDs.
func (apuo *AccessPolicyUpdateOne) AddResourceIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.AddResourceIDs(ids...)
	return apuo
}

// AddResources adds the "resources" edges to the Resource entity.
func (apuo *AccessPolicyUpdateOne) AddResources(r ...*Resource) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.AddResourceIDs(ids...)
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by IDs.
func (apuo *AccessPolicyUpdateOne) AddPermissionIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.AddPermissionIDs(ids...)
	return apuo
}

// AddPermissions adds the "permissions" edges to the Permission entity.
func (apuo *AccessPolicyUpdateOne) AddPermissions(p ...*Permission) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.AddPermissionIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (apuo *AccessPolicyUpdateOne) AddUserIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.AddUserIDs(ids...)
	return apuo
}

// AddUsers adds the "users" edges to the User entity.
func (apuo *AccessPolicyUpdateOne) AddUsers(u ...*User) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.AddUserIDs(ids...)
}

// Mutation returns the AccessPolicyMutation object of the builder.
func (apuo *AccessPolicyUpdateOne) Mutation() *AccessPolicyMutation {
	return apuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (apuo *AccessPolicyUpdateOne) ClearAccount() *AccessPolicyUpdateOne {
	apuo.mutation.ClearAccount()
	return apuo
}

// ClearRoles clears all "roles" edges to the Role entity.
func (apuo *AccessPolicyUpdateOne) ClearRoles() *AccessPolicyUpdateOne {
	apuo.mutation.ClearRoles()
	return apuo
}

// RemoveRoleIDs removes the "roles" edge to Role entities by IDs.
func (apuo *AccessPolicyUpdateOne) RemoveRoleIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.RemoveRoleIDs(ids...)
	return apuo
}

// RemoveRoles removes "roles" edges to Role entities.
func (apuo *AccessPolicyUpdateOne) RemoveRoles(r ...*Role) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.RemoveRoleIDs(ids...)
}

// ClearResources clears all "resources" edges to the Resource entity.
func (apuo *AccessPolicyUpdateOne) ClearResources() *AccessPolicyUpdateOne {
	apuo.mutation.ClearResources()
	return apuo
}

// RemoveResourceIDs removes the "resources" edge to Resource entities by IDs.
func (apuo *AccessPolicyUpdateOne) RemoveResourceIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.RemoveResourceIDs(ids...)
	return apuo
}

// RemoveResources removes "resources" edges to Resource entities.
func (apuo *AccessPolicyUpdateOne) RemoveResources(r ...*Resource) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return apuo.RemoveResourceIDs(ids...)
}

// ClearPermissions clears all "permissions" edges to the Permission entity.
func (apuo *AccessPolicyUpdateOne) ClearPermissions() *AccessPolicyUpdateOne {
	apuo.mutation.ClearPermissions()
	return apuo
}

// RemovePermissionIDs removes the "permissions" edge to Permission entities by IDs.
func (apuo *AccessPolicyUpdateOne) RemovePermissionIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.RemovePermissionIDs(ids...)
	return apuo
}

// RemovePermissions removes "permissions" edges to Permission entities.
func (apuo *AccessPolicyUpdateOne) RemovePermissions(p ...*Permission) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return apuo.RemovePermissionIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (apuo *AccessPolicyUpdateOne) ClearUsers() *AccessPolicyUpdateOne {
	apuo.mutation.ClearUsers()
	return apuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (apuo *AccessPolicyUpdateOne) RemoveUserIDs(ids ...uuid.UUID) *AccessPolicyUpdateOne {
	apuo.mutation.RemoveUserIDs(ids...)
	return apuo
}

// RemoveUsers removes "users" edges to User entities.
func (apuo *AccessPolicyUpdateOne) RemoveUsers(u ...*User) *AccessPolicyUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return apuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the AccessPolicyUpdate builder.
func (apuo *AccessPolicyUpdateOne) Where(ps ...predicate.AccessPolicy) *AccessPolicyUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AccessPolicyUpdateOne) Select(field string, fields ...string) *AccessPolicyUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AccessPolicy entity.
func (apuo *AccessPolicyUpdateOne) Save(ctx context.Context) (*AccessPolicy, error) {
	apuo.defaults()
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AccessPolicyUpdateOne) SaveX(ctx context.Context) *AccessPolicy {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AccessPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AccessPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AccessPolicyUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdatedAt(); !ok {
		v := accesspolicy.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apuo *AccessPolicyUpdateOne) check() error {
	if v, ok := apuo.mutation.Name(); ok {
		if err := accesspolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.name": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Effect(); ok {
		if err := accesspolicy.EffectValidator(v); err != nil {
			return &ValidationError{Name: "effect", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.effect": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.ResourceType(); ok {
		if err := accesspolicy.ResourceTypeValidator(v); err != nil {
			return &ValidationError{Name: "resource_type", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.resource_type": %w`, err)}
		}
	}
	if v, ok := apuo.mutation.Action(); ok {
		if err := accesspolicy.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`ent: validator failed for field "AccessPolicy.action": %w`, err)}
		}
	}
	if apuo.mutation.AccountCleared() && len(apuo.mutation.AccountIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AccessPolicy.account"`)
	}
	return nil
}

func (apuo *AccessPolicyUpdateOne) sqlSave(ctx context.Context) (_node *AccessPolicy, err error) {
	if err := apuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesspolicy.Table, accesspolicy.Columns, sqlgraph.NewFieldSpec(accesspolicy.FieldID, field.TypeUUID))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesspolicy.FieldID)
		for _, f := range fields {
			if !accesspolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accesspolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accesspolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(accesspolicy.FieldName, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Description(); ok {
		_spec.SetField(accesspolicy.FieldDescription, field.TypeString, value)
	}
	if apuo.mutation.DescriptionCleared() {
		_spec.ClearField(accesspolicy.FieldDescription, field.TypeString)
	}
	if value, ok := apuo.mutation.Effect(); ok {
		_spec.SetField(accesspolicy.FieldEffect, field.TypeEnum, value)
	}
	if value, ok := apuo.mutation.ResourceType(); ok {
		_spec.SetField(accesspolicy.FieldResourceType, field.TypeString, value)
	}
	if value, ok := apuo.mutation.Action(); ok {
		_spec.SetField(accesspolicy.FieldAction, field.TypeString, value)
	}
	if apuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesspolicy.AccountTable,
			Columns: []string{accesspolicy.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesspolicy.AccountTable,
			Columns: []string{accesspolicy.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedRolesIDs(); len(nodes) > 0 && !apuo.mutation.RolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.RolesTable,
			Columns: accesspolicy.RolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedResourcesIDs(); len(nodes) > 0 && !apuo.mutation.ResourcesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.ResourcesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.ResourcesTable,
			Columns: accesspolicy.ResourcesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(resource.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedPermissionsIDs(); len(nodes) > 0 && !apuo.mutation.PermissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.PermissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   accesspolicy.PermissionsTable,
			Columns: accesspolicy.PermissionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(permission.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !apuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   accesspolicy.UsersTable,
			Columns: accesspolicy.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccessPolicy{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesspolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
