// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/accesssecurity"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/asset"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
)

// AccessSecurityUpdate is the builder for updating AccessSecurity entities.
type AccessSecurityUpdate struct {
	config
	hooks    []Hook
	mutation *AccessSecurityMutation
}

// Where appends a list predicates to the AccessSecurityUpdate builder.
func (asu *AccessSecurityUpdate) Where(ps ...predicate.AccessSecurity) *AccessSecurityUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AccessSecurityUpdate) SetUpdatedAt(t time.Time) *AccessSecurityUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// SetRule sets the "rule" field.
func (asu *AccessSecurityUpdate) SetRule(s string) *AccessSecurityUpdate {
	asu.mutation.SetRule(s)
	return asu
}

// SetIP sets the "ip" field.
func (asu *AccessSecurityUpdate) SetIP(s string) *AccessSecurityUpdate {
	asu.mutation.SetIP(s)
	return asu
}

// SetSource sets the "source" field.
func (asu *AccessSecurityUpdate) SetSource(s string) *AccessSecurityUpdate {
	asu.mutation.SetSource(s)
	return asu
}

// SetPriority sets the "priority" field.
func (asu *AccessSecurityUpdate) SetPriority(i int64) *AccessSecurityUpdate {
	asu.mutation.ResetPriority()
	asu.mutation.SetPriority(i)
	return asu
}

// AddPriority adds i to the "priority" field.
func (asu *AccessSecurityUpdate) AddPriority(i int64) *AccessSecurityUpdate {
	asu.mutation.AddPriority(i)
	return asu
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (asu *AccessSecurityUpdate) AddAssetIDs(ids ...string) *AccessSecurityUpdate {
	asu.mutation.AddAssetIDs(ids...)
	return asu
}

// AddAssets adds the "assets" edges to the Asset entity.
func (asu *AccessSecurityUpdate) AddAssets(a ...*Asset) *AccessSecurityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.AddAssetIDs(ids...)
}

// Mutation returns the AccessSecurityMutation object of the builder.
func (asu *AccessSecurityUpdate) Mutation() *AccessSecurityMutation {
	return asu.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (asu *AccessSecurityUpdate) ClearAssets() *AccessSecurityUpdate {
	asu.mutation.ClearAssets()
	return asu
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (asu *AccessSecurityUpdate) RemoveAssetIDs(ids ...string) *AccessSecurityUpdate {
	asu.mutation.RemoveAssetIDs(ids...)
	return asu
}

// RemoveAssets removes "assets" edges to Asset entities.
func (asu *AccessSecurityUpdate) RemoveAssets(a ...*Asset) *AccessSecurityUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asu.RemoveAssetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AccessSecurityUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	asu.defaults()
	if len(asu.hooks) == 0 {
		affected, err = asu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessSecurityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asu.mutation = mutation
			affected, err = asu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asu.hooks) - 1; i >= 0; i-- {
			if asu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AccessSecurityUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AccessSecurityUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AccessSecurityUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AccessSecurityUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok {
		v := accesssecurity.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

func (asu *AccessSecurityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accesssecurity.Table,
			Columns: accesssecurity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accesssecurity.FieldID,
			},
		},
	}
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesssecurity.FieldUpdatedAt,
		})
	}
	if value, ok := asu.mutation.Rule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldRule,
		})
	}
	if value, ok := asu.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldIP,
		})
	}
	if value, ok := asu.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldSource,
		})
	}
	if value, ok := asu.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesssecurity.FieldPriority,
		})
	}
	if value, ok := asu.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesssecurity.FieldPriority,
		})
	}
	if asu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !asu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesssecurity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AccessSecurityUpdateOne is the builder for updating a single AccessSecurity entity.
type AccessSecurityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessSecurityMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AccessSecurityUpdateOne) SetUpdatedAt(t time.Time) *AccessSecurityUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// SetRule sets the "rule" field.
func (asuo *AccessSecurityUpdateOne) SetRule(s string) *AccessSecurityUpdateOne {
	asuo.mutation.SetRule(s)
	return asuo
}

// SetIP sets the "ip" field.
func (asuo *AccessSecurityUpdateOne) SetIP(s string) *AccessSecurityUpdateOne {
	asuo.mutation.SetIP(s)
	return asuo
}

// SetSource sets the "source" field.
func (asuo *AccessSecurityUpdateOne) SetSource(s string) *AccessSecurityUpdateOne {
	asuo.mutation.SetSource(s)
	return asuo
}

// SetPriority sets the "priority" field.
func (asuo *AccessSecurityUpdateOne) SetPriority(i int64) *AccessSecurityUpdateOne {
	asuo.mutation.ResetPriority()
	asuo.mutation.SetPriority(i)
	return asuo
}

// AddPriority adds i to the "priority" field.
func (asuo *AccessSecurityUpdateOne) AddPriority(i int64) *AccessSecurityUpdateOne {
	asuo.mutation.AddPriority(i)
	return asuo
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (asuo *AccessSecurityUpdateOne) AddAssetIDs(ids ...string) *AccessSecurityUpdateOne {
	asuo.mutation.AddAssetIDs(ids...)
	return asuo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (asuo *AccessSecurityUpdateOne) AddAssets(a ...*Asset) *AccessSecurityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.AddAssetIDs(ids...)
}

// Mutation returns the AccessSecurityMutation object of the builder.
func (asuo *AccessSecurityUpdateOne) Mutation() *AccessSecurityMutation {
	return asuo.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (asuo *AccessSecurityUpdateOne) ClearAssets() *AccessSecurityUpdateOne {
	asuo.mutation.ClearAssets()
	return asuo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (asuo *AccessSecurityUpdateOne) RemoveAssetIDs(ids ...string) *AccessSecurityUpdateOne {
	asuo.mutation.RemoveAssetIDs(ids...)
	return asuo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (asuo *AccessSecurityUpdateOne) RemoveAssets(a ...*Asset) *AccessSecurityUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asuo.RemoveAssetIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AccessSecurityUpdateOne) Select(field string, fields ...string) *AccessSecurityUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AccessSecurity entity.
func (asuo *AccessSecurityUpdateOne) Save(ctx context.Context) (*AccessSecurity, error) {
	var (
		err  error
		node *AccessSecurity
	)
	asuo.defaults()
	if len(asuo.hooks) == 0 {
		node, err = asuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessSecurityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asuo.mutation = mutation
			node, err = asuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asuo.hooks) - 1; i >= 0; i-- {
			if asuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AccessSecurityUpdateOne) SaveX(ctx context.Context) *AccessSecurity {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AccessSecurityUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AccessSecurityUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AccessSecurityUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok {
		v := accesssecurity.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

func (asuo *AccessSecurityUpdateOne) sqlSave(ctx context.Context) (_node *AccessSecurity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   accesssecurity.Table,
			Columns: accesssecurity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accesssecurity.FieldID,
			},
		},
	}
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AccessSecurity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesssecurity.FieldID)
		for _, f := range fields {
			if !accesssecurity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != accesssecurity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesssecurity.FieldUpdatedAt,
		})
	}
	if value, ok := asuo.mutation.Rule(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldRule,
		})
	}
	if value, ok := asuo.mutation.IP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldIP,
		})
	}
	if value, ok := asuo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldSource,
		})
	}
	if value, ok := asuo.mutation.Priority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesssecurity.FieldPriority,
		})
	}
	if value, ok := asuo.mutation.AddedPriority(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesssecurity.FieldPriority,
		})
	}
	if asuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !asuo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := asuo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AccessSecurity{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesssecurity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
