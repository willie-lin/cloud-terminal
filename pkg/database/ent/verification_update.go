// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/user"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/verification"
)

// VerificationUpdate is the builder for updating Verification entities.
type VerificationUpdate struct {
	config
	hooks    []Hook
	mutation *VerificationMutation
}

// Where appends a list predicates to the VerificationUpdate builder.
func (vu *VerificationUpdate) Where(ps ...predicate.Verification) *VerificationUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VerificationUpdate) SetUpdatedAt(t time.Time) *VerificationUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetClientIP sets the "client_ip" field.
func (vu *VerificationUpdate) SetClientIP(s string) *VerificationUpdate {
	vu.mutation.SetClientIP(s)
	return vu
}

// SetClientUserAgent sets the "clientUserAgent" field.
func (vu *VerificationUpdate) SetClientUserAgent(s string) *VerificationUpdate {
	vu.mutation.SetClientUserAgent(s)
	return vu
}

// SetLoginTime sets the "login_time" field.
func (vu *VerificationUpdate) SetLoginTime(t time.Time) *VerificationUpdate {
	vu.mutation.SetLoginTime(t)
	return vu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (vu *VerificationUpdate) SetNillableLoginTime(t *time.Time) *VerificationUpdate {
	if t != nil {
		vu.SetLoginTime(*t)
	}
	return vu
}

// SetLogoutTime sets the "logout_time" field.
func (vu *VerificationUpdate) SetLogoutTime(t time.Time) *VerificationUpdate {
	vu.mutation.SetLogoutTime(t)
	return vu
}

// SetRemember sets the "remember" field.
func (vu *VerificationUpdate) SetRemember(b bool) *VerificationUpdate {
	vu.mutation.SetRemember(b)
	return vu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (vu *VerificationUpdate) AddUserIDs(ids ...string) *VerificationUpdate {
	vu.mutation.AddUserIDs(ids...)
	return vu
}

// AddUsers adds the "users" edges to the User entity.
func (vu *VerificationUpdate) AddUsers(u ...*User) *VerificationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.AddUserIDs(ids...)
}

// Mutation returns the VerificationMutation object of the builder.
func (vu *VerificationUpdate) Mutation() *VerificationMutation {
	return vu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (vu *VerificationUpdate) ClearUsers() *VerificationUpdate {
	vu.mutation.ClearUsers()
	return vu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (vu *VerificationUpdate) RemoveUserIDs(ids ...string) *VerificationUpdate {
	vu.mutation.RemoveUserIDs(ids...)
	return vu
}

// RemoveUsers removes "users" edges to User entities.
func (vu *VerificationUpdate) RemoveUsers(u ...*User) *VerificationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VerificationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VerificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VerificationUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VerificationUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VerificationUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VerificationUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
	if _, ok := vu.mutation.LogoutTime(); !ok {
		v := verification.UpdateDefaultLogoutTime()
		vu.mutation.SetLogoutTime(v)
	}
}

func (vu *VerificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   verification.Table,
			Columns: verification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: verification.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldUpdatedAt,
		})
	}
	if value, ok := vu.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: verification.FieldClientIP,
		})
	}
	if value, ok := vu.mutation.ClientUserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: verification.FieldClientUserAgent,
		})
	}
	if value, ok := vu.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldLoginTime,
		})
	}
	if value, ok := vu.mutation.LogoutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldLogoutTime,
		})
	}
	if value, ok := vu.mutation.Remember(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: verification.FieldRemember,
		})
	}
	if vu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !vu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// VerificationUpdateOne is the builder for updating a single Verification entity.
type VerificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VerificationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VerificationUpdateOne) SetUpdatedAt(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetClientIP sets the "client_ip" field.
func (vuo *VerificationUpdateOne) SetClientIP(s string) *VerificationUpdateOne {
	vuo.mutation.SetClientIP(s)
	return vuo
}

// SetClientUserAgent sets the "clientUserAgent" field.
func (vuo *VerificationUpdateOne) SetClientUserAgent(s string) *VerificationUpdateOne {
	vuo.mutation.SetClientUserAgent(s)
	return vuo
}

// SetLoginTime sets the "login_time" field.
func (vuo *VerificationUpdateOne) SetLoginTime(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetLoginTime(t)
	return vuo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (vuo *VerificationUpdateOne) SetNillableLoginTime(t *time.Time) *VerificationUpdateOne {
	if t != nil {
		vuo.SetLoginTime(*t)
	}
	return vuo
}

// SetLogoutTime sets the "logout_time" field.
func (vuo *VerificationUpdateOne) SetLogoutTime(t time.Time) *VerificationUpdateOne {
	vuo.mutation.SetLogoutTime(t)
	return vuo
}

// SetRemember sets the "remember" field.
func (vuo *VerificationUpdateOne) SetRemember(b bool) *VerificationUpdateOne {
	vuo.mutation.SetRemember(b)
	return vuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (vuo *VerificationUpdateOne) AddUserIDs(ids ...string) *VerificationUpdateOne {
	vuo.mutation.AddUserIDs(ids...)
	return vuo
}

// AddUsers adds the "users" edges to the User entity.
func (vuo *VerificationUpdateOne) AddUsers(u ...*User) *VerificationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.AddUserIDs(ids...)
}

// Mutation returns the VerificationMutation object of the builder.
func (vuo *VerificationUpdateOne) Mutation() *VerificationMutation {
	return vuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (vuo *VerificationUpdateOne) ClearUsers() *VerificationUpdateOne {
	vuo.mutation.ClearUsers()
	return vuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (vuo *VerificationUpdateOne) RemoveUserIDs(ids ...string) *VerificationUpdateOne {
	vuo.mutation.RemoveUserIDs(ids...)
	return vuo
}

// RemoveUsers removes "users" edges to User entities.
func (vuo *VerificationUpdateOne) RemoveUsers(u ...*User) *VerificationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return vuo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VerificationUpdateOne) Select(field string, fields ...string) *VerificationUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Verification entity.
func (vuo *VerificationUpdateOne) Save(ctx context.Context) (*Verification, error) {
	var (
		err  error
		node *Verification
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VerificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VerificationUpdateOne) SaveX(ctx context.Context) *Verification {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VerificationUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VerificationUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VerificationUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := verification.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := vuo.mutation.LogoutTime(); !ok {
		v := verification.UpdateDefaultLogoutTime()
		vuo.mutation.SetLogoutTime(v)
	}
}

func (vuo *VerificationUpdateOne) sqlSave(ctx context.Context) (_node *Verification, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   verification.Table,
			Columns: verification.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: verification.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Verification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, verification.FieldID)
		for _, f := range fields {
			if !verification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != verification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldUpdatedAt,
		})
	}
	if value, ok := vuo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: verification.FieldClientIP,
		})
	}
	if value, ok := vuo.mutation.ClientUserAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: verification.FieldClientUserAgent,
		})
	}
	if value, ok := vuo.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldLoginTime,
		})
	}
	if value, ok := vuo.mutation.LogoutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: verification.FieldLogoutTime,
		})
	}
	if value, ok := vuo.mutation.Remember(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: verification.FieldRemember,
		})
	}
	if vuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !vuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   verification.UsersTable,
			Columns: []string{verification.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Verification{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{verification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
