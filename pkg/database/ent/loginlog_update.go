// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/loginlog"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
)

// LoginLogUpdate is the builder for updating LoginLog entities.
type LoginLogUpdate struct {
	config
	hooks    []Hook
	mutation *LoginLogMutation
}

// Where appends a list predicates to the LoginLogUpdate builder.
func (llu *LoginLogUpdate) Where(ps ...predicate.LoginLog) *LoginLogUpdate {
	llu.mutation.Where(ps...)
	return llu
}

// SetUpdatedAt sets the "updated_at" field.
func (llu *LoginLogUpdate) SetUpdatedAt(t time.Time) *LoginLogUpdate {
	llu.mutation.SetUpdatedAt(t)
	return llu
}

// SetUserID sets the "user_id" field.
func (llu *LoginLogUpdate) SetUserID(s string) *LoginLogUpdate {
	llu.mutation.SetUserID(s)
	return llu
}

// SetClientIP sets the "client_ip" field.
func (llu *LoginLogUpdate) SetClientIP(s string) *LoginLogUpdate {
	llu.mutation.SetClientIP(s)
	return llu
}

// SetClentUsetAgent sets the "clent_uset_agent" field.
func (llu *LoginLogUpdate) SetClentUsetAgent(s string) *LoginLogUpdate {
	llu.mutation.SetClentUsetAgent(s)
	return llu
}

// SetLoginTime sets the "login_time" field.
func (llu *LoginLogUpdate) SetLoginTime(t time.Time) *LoginLogUpdate {
	llu.mutation.SetLoginTime(t)
	return llu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (llu *LoginLogUpdate) SetNillableLoginTime(t *time.Time) *LoginLogUpdate {
	if t != nil {
		llu.SetLoginTime(*t)
	}
	return llu
}

// SetLogoutTime sets the "logout_time" field.
func (llu *LoginLogUpdate) SetLogoutTime(t time.Time) *LoginLogUpdate {
	llu.mutation.SetLogoutTime(t)
	return llu
}

// SetRemember sets the "remember" field.
func (llu *LoginLogUpdate) SetRemember(b bool) *LoginLogUpdate {
	llu.mutation.SetRemember(b)
	return llu
}

// Mutation returns the LoginLogMutation object of the builder.
func (llu *LoginLogUpdate) Mutation() *LoginLogMutation {
	return llu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (llu *LoginLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	llu.defaults()
	if len(llu.hooks) == 0 {
		affected, err = llu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			llu.mutation = mutation
			affected, err = llu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(llu.hooks) - 1; i >= 0; i-- {
			if llu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = llu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, llu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (llu *LoginLogUpdate) SaveX(ctx context.Context) int {
	affected, err := llu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (llu *LoginLogUpdate) Exec(ctx context.Context) error {
	_, err := llu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (llu *LoginLogUpdate) ExecX(ctx context.Context) {
	if err := llu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (llu *LoginLogUpdate) defaults() {
	if _, ok := llu.mutation.UpdatedAt(); !ok {
		v := loginlog.UpdateDefaultUpdatedAt()
		llu.mutation.SetUpdatedAt(v)
	}
	if _, ok := llu.mutation.LogoutTime(); !ok {
		v := loginlog.UpdateDefaultLogoutTime()
		llu.mutation.SetLogoutTime(v)
	}
}

func (llu *LoginLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginlog.Table,
			Columns: loginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: loginlog.FieldID,
			},
		},
	}
	if ps := llu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := llu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldUpdatedAt,
		})
	}
	if value, ok := llu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldUserID,
		})
	}
	if value, ok := llu.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldClientIP,
		})
	}
	if value, ok := llu.mutation.ClentUsetAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldClentUsetAgent,
		})
	}
	if value, ok := llu.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldLoginTime,
		})
	}
	if value, ok := llu.mutation.LogoutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldLogoutTime,
		})
	}
	if value, ok := llu.mutation.Remember(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: loginlog.FieldRemember,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, llu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LoginLogUpdateOne is the builder for updating a single LoginLog entity.
type LoginLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LoginLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (lluo *LoginLogUpdateOne) SetUpdatedAt(t time.Time) *LoginLogUpdateOne {
	lluo.mutation.SetUpdatedAt(t)
	return lluo
}

// SetUserID sets the "user_id" field.
func (lluo *LoginLogUpdateOne) SetUserID(s string) *LoginLogUpdateOne {
	lluo.mutation.SetUserID(s)
	return lluo
}

// SetClientIP sets the "client_ip" field.
func (lluo *LoginLogUpdateOne) SetClientIP(s string) *LoginLogUpdateOne {
	lluo.mutation.SetClientIP(s)
	return lluo
}

// SetClentUsetAgent sets the "clent_uset_agent" field.
func (lluo *LoginLogUpdateOne) SetClentUsetAgent(s string) *LoginLogUpdateOne {
	lluo.mutation.SetClentUsetAgent(s)
	return lluo
}

// SetLoginTime sets the "login_time" field.
func (lluo *LoginLogUpdateOne) SetLoginTime(t time.Time) *LoginLogUpdateOne {
	lluo.mutation.SetLoginTime(t)
	return lluo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (lluo *LoginLogUpdateOne) SetNillableLoginTime(t *time.Time) *LoginLogUpdateOne {
	if t != nil {
		lluo.SetLoginTime(*t)
	}
	return lluo
}

// SetLogoutTime sets the "logout_time" field.
func (lluo *LoginLogUpdateOne) SetLogoutTime(t time.Time) *LoginLogUpdateOne {
	lluo.mutation.SetLogoutTime(t)
	return lluo
}

// SetRemember sets the "remember" field.
func (lluo *LoginLogUpdateOne) SetRemember(b bool) *LoginLogUpdateOne {
	lluo.mutation.SetRemember(b)
	return lluo
}

// Mutation returns the LoginLogMutation object of the builder.
func (lluo *LoginLogUpdateOne) Mutation() *LoginLogMutation {
	return lluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lluo *LoginLogUpdateOne) Select(field string, fields ...string) *LoginLogUpdateOne {
	lluo.fields = append([]string{field}, fields...)
	return lluo
}

// Save executes the query and returns the updated LoginLog entity.
func (lluo *LoginLogUpdateOne) Save(ctx context.Context) (*LoginLog, error) {
	var (
		err  error
		node *LoginLog
	)
	lluo.defaults()
	if len(lluo.hooks) == 0 {
		node, err = lluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LoginLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lluo.mutation = mutation
			node, err = lluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lluo.hooks) - 1; i >= 0; i-- {
			if lluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (lluo *LoginLogUpdateOne) SaveX(ctx context.Context) *LoginLog {
	node, err := lluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lluo *LoginLogUpdateOne) Exec(ctx context.Context) error {
	_, err := lluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lluo *LoginLogUpdateOne) ExecX(ctx context.Context) {
	if err := lluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lluo *LoginLogUpdateOne) defaults() {
	if _, ok := lluo.mutation.UpdatedAt(); !ok {
		v := loginlog.UpdateDefaultUpdatedAt()
		lluo.mutation.SetUpdatedAt(v)
	}
	if _, ok := lluo.mutation.LogoutTime(); !ok {
		v := loginlog.UpdateDefaultLogoutTime()
		lluo.mutation.SetLogoutTime(v)
	}
}

func (lluo *LoginLogUpdateOne) sqlSave(ctx context.Context) (_node *LoginLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   loginlog.Table,
			Columns: loginlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: loginlog.FieldID,
			},
		},
	}
	id, ok := lluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LoginLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, loginlog.FieldID)
		for _, f := range fields {
			if !loginlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != loginlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldUpdatedAt,
		})
	}
	if value, ok := lluo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldUserID,
		})
	}
	if value, ok := lluo.mutation.ClientIP(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldClientIP,
		})
	}
	if value, ok := lluo.mutation.ClentUsetAgent(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: loginlog.FieldClentUsetAgent,
		})
	}
	if value, ok := lluo.mutation.LoginTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldLoginTime,
		})
	}
	if value, ok := lluo.mutation.LogoutTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: loginlog.FieldLogoutTime,
		})
	}
	if value, ok := lluo.mutation.Remember(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: loginlog.FieldRemember,
		})
	}
	_node = &LoginLog{config: lluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{loginlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
