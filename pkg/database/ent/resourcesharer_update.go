// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/predicate"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/resourcesharer"
)

// ResourceSharerUpdate is the builder for updating ResourceSharer entities.
type ResourceSharerUpdate struct {
	config
	hooks    []Hook
	mutation *ResourceSharerMutation
}

// Where appends a list predicates to the ResourceSharerUpdate builder.
func (rsu *ResourceSharerUpdate) Where(ps ...predicate.ResourceSharer) *ResourceSharerUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetUpdatedAt sets the "updated_at" field.
func (rsu *ResourceSharerUpdate) SetUpdatedAt(t time.Time) *ResourceSharerUpdate {
	rsu.mutation.SetUpdatedAt(t)
	return rsu
}

// SetResourceID sets the "resource_id" field.
func (rsu *ResourceSharerUpdate) SetResourceID(s string) *ResourceSharerUpdate {
	rsu.mutation.SetResourceID(s)
	return rsu
}

// SetResourceType sets the "resource_type" field.
func (rsu *ResourceSharerUpdate) SetResourceType(s string) *ResourceSharerUpdate {
	rsu.mutation.SetResourceType(s)
	return rsu
}

// SetUserID sets the "user_id" field.
func (rsu *ResourceSharerUpdate) SetUserID(s string) *ResourceSharerUpdate {
	rsu.mutation.SetUserID(s)
	return rsu
}

// SetUserGroupID sets the "userGroup_id" field.
func (rsu *ResourceSharerUpdate) SetUserGroupID(s string) *ResourceSharerUpdate {
	rsu.mutation.SetUserGroupID(s)
	return rsu
}

// Mutation returns the ResourceSharerMutation object of the builder.
func (rsu *ResourceSharerUpdate) Mutation() *ResourceSharerMutation {
	return rsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *ResourceSharerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsu.defaults()
	if len(rsu.hooks) == 0 {
		affected, err = rsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSharerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsu.mutation = mutation
			affected, err = rsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsu.hooks) - 1; i >= 0; i-- {
			if rsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *ResourceSharerUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *ResourceSharerUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *ResourceSharerUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsu *ResourceSharerUpdate) defaults() {
	if _, ok := rsu.mutation.UpdatedAt(); !ok {
		v := resourcesharer.UpdateDefaultUpdatedAt()
		rsu.mutation.SetUpdatedAt(v)
	}
}

func (rsu *ResourceSharerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcesharer.Table,
			Columns: resourcesharer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: resourcesharer.FieldID,
			},
		},
	}
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcesharer.FieldUpdatedAt,
		})
	}
	if value, ok := rsu.mutation.ResourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceID,
		})
	}
	if value, ok := rsu.mutation.ResourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceType,
		})
	}
	if value, ok := rsu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserID,
		})
	}
	if value, ok := rsu.mutation.UserGroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserGroupID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcesharer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ResourceSharerUpdateOne is the builder for updating a single ResourceSharer entity.
type ResourceSharerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ResourceSharerMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rsuo *ResourceSharerUpdateOne) SetUpdatedAt(t time.Time) *ResourceSharerUpdateOne {
	rsuo.mutation.SetUpdatedAt(t)
	return rsuo
}

// SetResourceID sets the "resource_id" field.
func (rsuo *ResourceSharerUpdateOne) SetResourceID(s string) *ResourceSharerUpdateOne {
	rsuo.mutation.SetResourceID(s)
	return rsuo
}

// SetResourceType sets the "resource_type" field.
func (rsuo *ResourceSharerUpdateOne) SetResourceType(s string) *ResourceSharerUpdateOne {
	rsuo.mutation.SetResourceType(s)
	return rsuo
}

// SetUserID sets the "user_id" field.
func (rsuo *ResourceSharerUpdateOne) SetUserID(s string) *ResourceSharerUpdateOne {
	rsuo.mutation.SetUserID(s)
	return rsuo
}

// SetUserGroupID sets the "userGroup_id" field.
func (rsuo *ResourceSharerUpdateOne) SetUserGroupID(s string) *ResourceSharerUpdateOne {
	rsuo.mutation.SetUserGroupID(s)
	return rsuo
}

// Mutation returns the ResourceSharerMutation object of the builder.
func (rsuo *ResourceSharerUpdateOne) Mutation() *ResourceSharerMutation {
	return rsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *ResourceSharerUpdateOne) Select(field string, fields ...string) *ResourceSharerUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated ResourceSharer entity.
func (rsuo *ResourceSharerUpdateOne) Save(ctx context.Context) (*ResourceSharer, error) {
	var (
		err  error
		node *ResourceSharer
	)
	rsuo.defaults()
	if len(rsuo.hooks) == 0 {
		node, err = rsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResourceSharerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsuo.mutation = mutation
			node, err = rsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsuo.hooks) - 1; i >= 0; i-- {
			if rsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *ResourceSharerUpdateOne) SaveX(ctx context.Context) *ResourceSharer {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *ResourceSharerUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *ResourceSharerUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsuo *ResourceSharerUpdateOne) defaults() {
	if _, ok := rsuo.mutation.UpdatedAt(); !ok {
		v := resourcesharer.UpdateDefaultUpdatedAt()
		rsuo.mutation.SetUpdatedAt(v)
	}
}

func (rsuo *ResourceSharerUpdateOne) sqlSave(ctx context.Context) (_node *ResourceSharer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   resourcesharer.Table,
			Columns: resourcesharer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: resourcesharer.FieldID,
			},
		},
	}
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ResourceSharer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, resourcesharer.FieldID)
		for _, f := range fields {
			if !resourcesharer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != resourcesharer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: resourcesharer.FieldUpdatedAt,
		})
	}
	if value, ok := rsuo.mutation.ResourceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceID,
		})
	}
	if value, ok := rsuo.mutation.ResourceType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldResourceType,
		})
	}
	if value, ok := rsuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserID,
		})
	}
	if value, ok := rsuo.mutation.UserGroupID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: resourcesharer.FieldUserGroupID,
		})
	}
	_node = &ResourceSharer{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{resourcesharer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
