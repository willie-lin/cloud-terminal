// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/willie-lin/cloud-terminal/pkg/database/ent/migrate"

	"github.com/willie-lin/cloud-terminal/pkg/database/ent/accesssecurity"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/asset"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/command"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/credential"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/group"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/job"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/loginlog"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/property"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/resourcesharer"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/session"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/test"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/user"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/verification"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AccessSecurity is the client for interacting with the AccessSecurity builders.
	AccessSecurity *AccessSecurityClient
	// Asset is the client for interacting with the Asset builders.
	Asset *AssetClient
	// Command is the client for interacting with the Command builders.
	Command *CommandClient
	// Credential is the client for interacting with the Credential builders.
	Credential *CredentialClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// LoginLog is the client for interacting with the LoginLog builders.
	LoginLog *LoginLogClient
	// Property is the client for interacting with the Property builders.
	Property *PropertyClient
	// ResourceSharer is the client for interacting with the ResourceSharer builders.
	ResourceSharer *ResourceSharerClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Test is the client for interacting with the Test builders.
	Test *TestClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Verification is the client for interacting with the Verification builders.
	Verification *VerificationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AccessSecurity = NewAccessSecurityClient(c.config)
	c.Asset = NewAssetClient(c.config)
	c.Command = NewCommandClient(c.config)
	c.Credential = NewCredentialClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.Job = NewJobClient(c.config)
	c.LoginLog = NewLoginLogClient(c.config)
	c.Property = NewPropertyClient(c.config)
	c.ResourceSharer = NewResourceSharerClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Test = NewTestClient(c.config)
	c.User = NewUserClient(c.config)
	c.Verification = NewVerificationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AccessSecurity: NewAccessSecurityClient(cfg),
		Asset:          NewAssetClient(cfg),
		Command:        NewCommandClient(cfg),
		Credential:     NewCredentialClient(cfg),
		Group:          NewGroupClient(cfg),
		Job:            NewJobClient(cfg),
		LoginLog:       NewLoginLogClient(cfg),
		Property:       NewPropertyClient(cfg),
		ResourceSharer: NewResourceSharerClient(cfg),
		Session:        NewSessionClient(cfg),
		Test:           NewTestClient(cfg),
		User:           NewUserClient(cfg),
		Verification:   NewVerificationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		AccessSecurity: NewAccessSecurityClient(cfg),
		Asset:          NewAssetClient(cfg),
		Command:        NewCommandClient(cfg),
		Credential:     NewCredentialClient(cfg),
		Group:          NewGroupClient(cfg),
		Job:            NewJobClient(cfg),
		LoginLog:       NewLoginLogClient(cfg),
		Property:       NewPropertyClient(cfg),
		ResourceSharer: NewResourceSharerClient(cfg),
		Session:        NewSessionClient(cfg),
		Test:           NewTestClient(cfg),
		User:           NewUserClient(cfg),
		Verification:   NewVerificationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AccessSecurity.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AccessSecurity.Use(hooks...)
	c.Asset.Use(hooks...)
	c.Command.Use(hooks...)
	c.Credential.Use(hooks...)
	c.Group.Use(hooks...)
	c.Job.Use(hooks...)
	c.LoginLog.Use(hooks...)
	c.Property.Use(hooks...)
	c.ResourceSharer.Use(hooks...)
	c.Session.Use(hooks...)
	c.Test.Use(hooks...)
	c.User.Use(hooks...)
	c.Verification.Use(hooks...)
}

// AccessSecurityClient is a client for the AccessSecurity schema.
type AccessSecurityClient struct {
	config
}

// NewAccessSecurityClient returns a client for the AccessSecurity from the given config.
func NewAccessSecurityClient(c config) *AccessSecurityClient {
	return &AccessSecurityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accesssecurity.Hooks(f(g(h())))`.
func (c *AccessSecurityClient) Use(hooks ...Hook) {
	c.hooks.AccessSecurity = append(c.hooks.AccessSecurity, hooks...)
}

// Create returns a create builder for AccessSecurity.
func (c *AccessSecurityClient) Create() *AccessSecurityCreate {
	mutation := newAccessSecurityMutation(c.config, OpCreate)
	return &AccessSecurityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AccessSecurity entities.
func (c *AccessSecurityClient) CreateBulk(builders ...*AccessSecurityCreate) *AccessSecurityCreateBulk {
	return &AccessSecurityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AccessSecurity.
func (c *AccessSecurityClient) Update() *AccessSecurityUpdate {
	mutation := newAccessSecurityMutation(c.config, OpUpdate)
	return &AccessSecurityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccessSecurityClient) UpdateOne(as *AccessSecurity) *AccessSecurityUpdateOne {
	mutation := newAccessSecurityMutation(c.config, OpUpdateOne, withAccessSecurity(as))
	return &AccessSecurityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccessSecurityClient) UpdateOneID(id string) *AccessSecurityUpdateOne {
	mutation := newAccessSecurityMutation(c.config, OpUpdateOne, withAccessSecurityID(id))
	return &AccessSecurityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AccessSecurity.
func (c *AccessSecurityClient) Delete() *AccessSecurityDelete {
	mutation := newAccessSecurityMutation(c.config, OpDelete)
	return &AccessSecurityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AccessSecurityClient) DeleteOne(as *AccessSecurity) *AccessSecurityDeleteOne {
	return c.DeleteOneID(as.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AccessSecurityClient) DeleteOneID(id string) *AccessSecurityDeleteOne {
	builder := c.Delete().Where(accesssecurity.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccessSecurityDeleteOne{builder}
}

// Query returns a query builder for AccessSecurity.
func (c *AccessSecurityClient) Query() *AccessSecurityQuery {
	return &AccessSecurityQuery{
		config: c.config,
	}
}

// Get returns a AccessSecurity entity by its id.
func (c *AccessSecurityClient) Get(ctx context.Context, id string) (*AccessSecurity, error) {
	return c.Query().Where(accesssecurity.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccessSecurityClient) GetX(ctx context.Context, id string) *AccessSecurity {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssets queries the assets edge of a AccessSecurity.
func (c *AccessSecurityClient) QueryAssets(as *AccessSecurity) *AssetQuery {
	query := &AssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := as.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(accesssecurity.Table, accesssecurity.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, accesssecurity.AssetsTable, accesssecurity.AssetsColumn),
		)
		fromV = sqlgraph.Neighbors(as.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AccessSecurityClient) Hooks() []Hook {
	return c.hooks.AccessSecurity
}

// AssetClient is a client for the Asset schema.
type AssetClient struct {
	config
}

// NewAssetClient returns a client for the Asset from the given config.
func NewAssetClient(c config) *AssetClient {
	return &AssetClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `asset.Hooks(f(g(h())))`.
func (c *AssetClient) Use(hooks ...Hook) {
	c.hooks.Asset = append(c.hooks.Asset, hooks...)
}

// Create returns a create builder for Asset.
func (c *AssetClient) Create() *AssetCreate {
	mutation := newAssetMutation(c.config, OpCreate)
	return &AssetCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Asset entities.
func (c *AssetClient) CreateBulk(builders ...*AssetCreate) *AssetCreateBulk {
	return &AssetCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Asset.
func (c *AssetClient) Update() *AssetUpdate {
	mutation := newAssetMutation(c.config, OpUpdate)
	return &AssetUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AssetClient) UpdateOne(a *Asset) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAsset(a))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AssetClient) UpdateOneID(id string) *AssetUpdateOne {
	mutation := newAssetMutation(c.config, OpUpdateOne, withAssetID(id))
	return &AssetUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Asset.
func (c *AssetClient) Delete() *AssetDelete {
	mutation := newAssetMutation(c.config, OpDelete)
	return &AssetDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AssetClient) DeleteOne(a *Asset) *AssetDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AssetClient) DeleteOneID(id string) *AssetDeleteOne {
	builder := c.Delete().Where(asset.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AssetDeleteOne{builder}
}

// Query returns a query builder for Asset.
func (c *AssetClient) Query() *AssetQuery {
	return &AssetQuery{
		config: c.config,
	}
}

// Get returns a Asset entity by its id.
func (c *AssetClient) Get(ctx context.Context, id string) (*Asset, error) {
	return c.Query().Where(asset.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AssetClient) GetX(ctx context.Context, id string) *Asset {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySessions queries the sessions edge of a Asset.
func (c *AssetClient) QuerySessions(a *Asset) *SessionQuery {
	query := &SessionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asset.SessionsTable, asset.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AssetClient) Hooks() []Hook {
	return c.hooks.Asset
}

// CommandClient is a client for the Command schema.
type CommandClient struct {
	config
}

// NewCommandClient returns a client for the Command from the given config.
func NewCommandClient(c config) *CommandClient {
	return &CommandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `command.Hooks(f(g(h())))`.
func (c *CommandClient) Use(hooks ...Hook) {
	c.hooks.Command = append(c.hooks.Command, hooks...)
}

// Create returns a create builder for Command.
func (c *CommandClient) Create() *CommandCreate {
	mutation := newCommandMutation(c.config, OpCreate)
	return &CommandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Command entities.
func (c *CommandClient) CreateBulk(builders ...*CommandCreate) *CommandCreateBulk {
	return &CommandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Command.
func (c *CommandClient) Update() *CommandUpdate {
	mutation := newCommandMutation(c.config, OpUpdate)
	return &CommandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommandClient) UpdateOne(co *Command) *CommandUpdateOne {
	mutation := newCommandMutation(c.config, OpUpdateOne, withCommand(co))
	return &CommandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommandClient) UpdateOneID(id string) *CommandUpdateOne {
	mutation := newCommandMutation(c.config, OpUpdateOne, withCommandID(id))
	return &CommandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Command.
func (c *CommandClient) Delete() *CommandDelete {
	mutation := newCommandMutation(c.config, OpDelete)
	return &CommandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommandClient) DeleteOne(co *Command) *CommandDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommandClient) DeleteOneID(id string) *CommandDeleteOne {
	builder := c.Delete().Where(command.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommandDeleteOne{builder}
}

// Query returns a query builder for Command.
func (c *CommandClient) Query() *CommandQuery {
	return &CommandQuery{
		config: c.config,
	}
}

// Get returns a Command entity by its id.
func (c *CommandClient) Get(ctx context.Context, id string) (*Command, error) {
	return c.Query().Where(command.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommandClient) GetX(ctx context.Context, id string) *Command {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CommandClient) Hooks() []Hook {
	return c.hooks.Command
}

// CredentialClient is a client for the Credential schema.
type CredentialClient struct {
	config
}

// NewCredentialClient returns a client for the Credential from the given config.
func NewCredentialClient(c config) *CredentialClient {
	return &CredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `credential.Hooks(f(g(h())))`.
func (c *CredentialClient) Use(hooks ...Hook) {
	c.hooks.Credential = append(c.hooks.Credential, hooks...)
}

// Create returns a create builder for Credential.
func (c *CredentialClient) Create() *CredentialCreate {
	mutation := newCredentialMutation(c.config, OpCreate)
	return &CredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Credential entities.
func (c *CredentialClient) CreateBulk(builders ...*CredentialCreate) *CredentialCreateBulk {
	return &CredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Credential.
func (c *CredentialClient) Update() *CredentialUpdate {
	mutation := newCredentialMutation(c.config, OpUpdate)
	return &CredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CredentialClient) UpdateOne(cr *Credential) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredential(cr))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CredentialClient) UpdateOneID(id string) *CredentialUpdateOne {
	mutation := newCredentialMutation(c.config, OpUpdateOne, withCredentialID(id))
	return &CredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Credential.
func (c *CredentialClient) Delete() *CredentialDelete {
	mutation := newCredentialMutation(c.config, OpDelete)
	return &CredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CredentialClient) DeleteOne(cr *Credential) *CredentialDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CredentialClient) DeleteOneID(id string) *CredentialDeleteOne {
	builder := c.Delete().Where(credential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CredentialDeleteOne{builder}
}

// Query returns a query builder for Credential.
func (c *CredentialClient) Query() *CredentialQuery {
	return &CredentialQuery{
		config: c.config,
	}
}

// Get returns a Credential entity by its id.
func (c *CredentialClient) Get(ctx context.Context, id string) (*Credential, error) {
	return c.Query().Where(credential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CredentialClient) GetX(ctx context.Context, id string) *Credential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CredentialClient) Hooks() []Hook {
	return c.hooks.Credential
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Create returns a create builder for Group.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id string) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GroupClient) DeleteOneID(id string) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id string) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id string) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Group.
func (c *GroupClient) QueryUsers(gr *Group) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.UsersTable, group.UsersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Create returns a create builder for Job.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id string) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobClient) DeleteOneID(id string) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id string) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id string) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// LoginLogClient is a client for the LoginLog schema.
type LoginLogClient struct {
	config
}

// NewLoginLogClient returns a client for the LoginLog from the given config.
func NewLoginLogClient(c config) *LoginLogClient {
	return &LoginLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `loginlog.Hooks(f(g(h())))`.
func (c *LoginLogClient) Use(hooks ...Hook) {
	c.hooks.LoginLog = append(c.hooks.LoginLog, hooks...)
}

// Create returns a create builder for LoginLog.
func (c *LoginLogClient) Create() *LoginLogCreate {
	mutation := newLoginLogMutation(c.config, OpCreate)
	return &LoginLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LoginLog entities.
func (c *LoginLogClient) CreateBulk(builders ...*LoginLogCreate) *LoginLogCreateBulk {
	return &LoginLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LoginLog.
func (c *LoginLogClient) Update() *LoginLogUpdate {
	mutation := newLoginLogMutation(c.config, OpUpdate)
	return &LoginLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LoginLogClient) UpdateOne(ll *LoginLog) *LoginLogUpdateOne {
	mutation := newLoginLogMutation(c.config, OpUpdateOne, withLoginLog(ll))
	return &LoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LoginLogClient) UpdateOneID(id string) *LoginLogUpdateOne {
	mutation := newLoginLogMutation(c.config, OpUpdateOne, withLoginLogID(id))
	return &LoginLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LoginLog.
func (c *LoginLogClient) Delete() *LoginLogDelete {
	mutation := newLoginLogMutation(c.config, OpDelete)
	return &LoginLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LoginLogClient) DeleteOne(ll *LoginLog) *LoginLogDeleteOne {
	return c.DeleteOneID(ll.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LoginLogClient) DeleteOneID(id string) *LoginLogDeleteOne {
	builder := c.Delete().Where(loginlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LoginLogDeleteOne{builder}
}

// Query returns a query builder for LoginLog.
func (c *LoginLogClient) Query() *LoginLogQuery {
	return &LoginLogQuery{
		config: c.config,
	}
}

// Get returns a LoginLog entity by its id.
func (c *LoginLogClient) Get(ctx context.Context, id string) (*LoginLog, error) {
	return c.Query().Where(loginlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LoginLogClient) GetX(ctx context.Context, id string) *LoginLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LoginLogClient) Hooks() []Hook {
	return c.hooks.LoginLog
}

// PropertyClient is a client for the Property schema.
type PropertyClient struct {
	config
}

// NewPropertyClient returns a client for the Property from the given config.
func NewPropertyClient(c config) *PropertyClient {
	return &PropertyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `property.Hooks(f(g(h())))`.
func (c *PropertyClient) Use(hooks ...Hook) {
	c.hooks.Property = append(c.hooks.Property, hooks...)
}

// Create returns a create builder for Property.
func (c *PropertyClient) Create() *PropertyCreate {
	mutation := newPropertyMutation(c.config, OpCreate)
	return &PropertyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Property entities.
func (c *PropertyClient) CreateBulk(builders ...*PropertyCreate) *PropertyCreateBulk {
	return &PropertyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Property.
func (c *PropertyClient) Update() *PropertyUpdate {
	mutation := newPropertyMutation(c.config, OpUpdate)
	return &PropertyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PropertyClient) UpdateOne(pr *Property) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withProperty(pr))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PropertyClient) UpdateOneID(id int) *PropertyUpdateOne {
	mutation := newPropertyMutation(c.config, OpUpdateOne, withPropertyID(id))
	return &PropertyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Property.
func (c *PropertyClient) Delete() *PropertyDelete {
	mutation := newPropertyMutation(c.config, OpDelete)
	return &PropertyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PropertyClient) DeleteOne(pr *Property) *PropertyDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PropertyClient) DeleteOneID(id int) *PropertyDeleteOne {
	builder := c.Delete().Where(property.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PropertyDeleteOne{builder}
}

// Query returns a query builder for Property.
func (c *PropertyClient) Query() *PropertyQuery {
	return &PropertyQuery{
		config: c.config,
	}
}

// Get returns a Property entity by its id.
func (c *PropertyClient) Get(ctx context.Context, id int) (*Property, error) {
	return c.Query().Where(property.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PropertyClient) GetX(ctx context.Context, id int) *Property {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PropertyClient) Hooks() []Hook {
	return c.hooks.Property
}

// ResourceSharerClient is a client for the ResourceSharer schema.
type ResourceSharerClient struct {
	config
}

// NewResourceSharerClient returns a client for the ResourceSharer from the given config.
func NewResourceSharerClient(c config) *ResourceSharerClient {
	return &ResourceSharerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `resourcesharer.Hooks(f(g(h())))`.
func (c *ResourceSharerClient) Use(hooks ...Hook) {
	c.hooks.ResourceSharer = append(c.hooks.ResourceSharer, hooks...)
}

// Create returns a create builder for ResourceSharer.
func (c *ResourceSharerClient) Create() *ResourceSharerCreate {
	mutation := newResourceSharerMutation(c.config, OpCreate)
	return &ResourceSharerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ResourceSharer entities.
func (c *ResourceSharerClient) CreateBulk(builders ...*ResourceSharerCreate) *ResourceSharerCreateBulk {
	return &ResourceSharerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ResourceSharer.
func (c *ResourceSharerClient) Update() *ResourceSharerUpdate {
	mutation := newResourceSharerMutation(c.config, OpUpdate)
	return &ResourceSharerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ResourceSharerClient) UpdateOne(rs *ResourceSharer) *ResourceSharerUpdateOne {
	mutation := newResourceSharerMutation(c.config, OpUpdateOne, withResourceSharer(rs))
	return &ResourceSharerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ResourceSharerClient) UpdateOneID(id string) *ResourceSharerUpdateOne {
	mutation := newResourceSharerMutation(c.config, OpUpdateOne, withResourceSharerID(id))
	return &ResourceSharerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ResourceSharer.
func (c *ResourceSharerClient) Delete() *ResourceSharerDelete {
	mutation := newResourceSharerMutation(c.config, OpDelete)
	return &ResourceSharerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ResourceSharerClient) DeleteOne(rs *ResourceSharer) *ResourceSharerDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ResourceSharerClient) DeleteOneID(id string) *ResourceSharerDeleteOne {
	builder := c.Delete().Where(resourcesharer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ResourceSharerDeleteOne{builder}
}

// Query returns a query builder for ResourceSharer.
func (c *ResourceSharerClient) Query() *ResourceSharerQuery {
	return &ResourceSharerQuery{
		config: c.config,
	}
}

// Get returns a ResourceSharer entity by its id.
func (c *ResourceSharerClient) Get(ctx context.Context, id string) (*ResourceSharer, error) {
	return c.Query().Where(resourcesharer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ResourceSharerClient) GetX(ctx context.Context, id string) *ResourceSharer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ResourceSharerClient) Hooks() []Hook {
	return c.hooks.ResourceSharer
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Create returns a create builder for Session.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id string) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SessionClient) DeleteOneID(id string) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id string) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id string) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAssets queries the assets edge of a Session.
func (c *SessionClient) QueryAssets(s *Session) *AssetQuery {
	query := &AssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.AssetsTable, session.AssetsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// TestClient is a client for the Test schema.
type TestClient struct {
	config
}

// NewTestClient returns a client for the Test from the given config.
func NewTestClient(c config) *TestClient {
	return &TestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `test.Hooks(f(g(h())))`.
func (c *TestClient) Use(hooks ...Hook) {
	c.hooks.Test = append(c.hooks.Test, hooks...)
}

// Create returns a create builder for Test.
func (c *TestClient) Create() *TestCreate {
	mutation := newTestMutation(c.config, OpCreate)
	return &TestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Test entities.
func (c *TestClient) CreateBulk(builders ...*TestCreate) *TestCreateBulk {
	return &TestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Test.
func (c *TestClient) Update() *TestUpdate {
	mutation := newTestMutation(c.config, OpUpdate)
	return &TestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TestClient) UpdateOne(t *Test) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTest(t))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TestClient) UpdateOneID(id string) *TestUpdateOne {
	mutation := newTestMutation(c.config, OpUpdateOne, withTestID(id))
	return &TestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Test.
func (c *TestClient) Delete() *TestDelete {
	mutation := newTestMutation(c.config, OpDelete)
	return &TestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TestClient) DeleteOne(t *Test) *TestDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TestClient) DeleteOneID(id string) *TestDeleteOne {
	builder := c.Delete().Where(test.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TestDeleteOne{builder}
}

// Query returns a query builder for Test.
func (c *TestClient) Query() *TestQuery {
	return &TestQuery{
		config: c.config,
	}
}

// Get returns a Test entity by its id.
func (c *TestClient) Get(ctx context.Context, id string) (*Test, error) {
	return c.Query().Where(test.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TestClient) GetX(ctx context.Context, id string) *Test {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TestClient) Hooks() []Hook {
	return c.hooks.Test
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAssets queries the assets edge of a User.
func (c *UserClient) QueryAssets(u *User) *AssetQuery {
	query := &AssetQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(asset.Table, asset.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssetsTable, user.AssetsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VerificationClient is a client for the Verification schema.
type VerificationClient struct {
	config
}

// NewVerificationClient returns a client for the Verification from the given config.
func NewVerificationClient(c config) *VerificationClient {
	return &VerificationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `verification.Hooks(f(g(h())))`.
func (c *VerificationClient) Use(hooks ...Hook) {
	c.hooks.Verification = append(c.hooks.Verification, hooks...)
}

// Create returns a create builder for Verification.
func (c *VerificationClient) Create() *VerificationCreate {
	mutation := newVerificationMutation(c.config, OpCreate)
	return &VerificationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Verification entities.
func (c *VerificationClient) CreateBulk(builders ...*VerificationCreate) *VerificationCreateBulk {
	return &VerificationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Verification.
func (c *VerificationClient) Update() *VerificationUpdate {
	mutation := newVerificationMutation(c.config, OpUpdate)
	return &VerificationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VerificationClient) UpdateOne(v *Verification) *VerificationUpdateOne {
	mutation := newVerificationMutation(c.config, OpUpdateOne, withVerification(v))
	return &VerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VerificationClient) UpdateOneID(id string) *VerificationUpdateOne {
	mutation := newVerificationMutation(c.config, OpUpdateOne, withVerificationID(id))
	return &VerificationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Verification.
func (c *VerificationClient) Delete() *VerificationDelete {
	mutation := newVerificationMutation(c.config, OpDelete)
	return &VerificationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *VerificationClient) DeleteOne(v *Verification) *VerificationDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *VerificationClient) DeleteOneID(id string) *VerificationDeleteOne {
	builder := c.Delete().Where(verification.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VerificationDeleteOne{builder}
}

// Query returns a query builder for Verification.
func (c *VerificationClient) Query() *VerificationQuery {
	return &VerificationQuery{
		config: c.config,
	}
}

// Get returns a Verification entity by its id.
func (c *VerificationClient) Get(ctx context.Context, id string) (*Verification, error) {
	return c.Query().Where(verification.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VerificationClient) GetX(ctx context.Context, id string) *Verification {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUsers queries the users edge of a Verification.
func (c *VerificationClient) QueryUsers(v *Verification) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(verification.Table, verification.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, verification.UsersTable, verification.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VerificationClient) Hooks() []Hook {
	return c.hooks.Verification
}
