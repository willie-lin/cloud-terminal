// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/accesssecurity"
	"github.com/willie-lin/cloud-terminal/pkg/database/ent/asset"
)

// AccessSecurityCreate is the builder for creating a AccessSecurity entity.
type AccessSecurityCreate struct {
	config
	mutation *AccessSecurityMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (asc *AccessSecurityCreate) SetCreatedAt(t time.Time) *AccessSecurityCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AccessSecurityCreate) SetNillableCreatedAt(t *time.Time) *AccessSecurityCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AccessSecurityCreate) SetUpdatedAt(t time.Time) *AccessSecurityCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AccessSecurityCreate) SetNillableUpdatedAt(t *time.Time) *AccessSecurityCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetRule sets the "rule" field.
func (asc *AccessSecurityCreate) SetRule(s string) *AccessSecurityCreate {
	asc.mutation.SetRule(s)
	return asc
}

// SetIP sets the "ip" field.
func (asc *AccessSecurityCreate) SetIP(s string) *AccessSecurityCreate {
	asc.mutation.SetIP(s)
	return asc
}

// SetSource sets the "source" field.
func (asc *AccessSecurityCreate) SetSource(s string) *AccessSecurityCreate {
	asc.mutation.SetSource(s)
	return asc
}

// SetPriority sets the "priority" field.
func (asc *AccessSecurityCreate) SetPriority(i int64) *AccessSecurityCreate {
	asc.mutation.SetPriority(i)
	return asc
}

// SetID sets the "id" field.
func (asc *AccessSecurityCreate) SetID(s string) *AccessSecurityCreate {
	asc.mutation.SetID(s)
	return asc
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (asc *AccessSecurityCreate) AddAssetIDs(ids ...string) *AccessSecurityCreate {
	asc.mutation.AddAssetIDs(ids...)
	return asc
}

// AddAssets adds the "assets" edges to the Asset entity.
func (asc *AccessSecurityCreate) AddAssets(a ...*Asset) *AccessSecurityCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return asc.AddAssetIDs(ids...)
}

// Mutation returns the AccessSecurityMutation object of the builder.
func (asc *AccessSecurityCreate) Mutation() *AccessSecurityMutation {
	return asc.mutation
}

// Save creates the AccessSecurity in the database.
func (asc *AccessSecurityCreate) Save(ctx context.Context) (*AccessSecurity, error) {
	var (
		err  error
		node *AccessSecurity
	)
	asc.defaults()
	if len(asc.hooks) == 0 {
		if err = asc.check(); err != nil {
			return nil, err
		}
		node, err = asc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccessSecurityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asc.check(); err != nil {
				return nil, err
			}
			asc.mutation = mutation
			if node, err = asc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asc.hooks) - 1; i >= 0; i-- {
			if asc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AccessSecurityCreate) SaveX(ctx context.Context) *AccessSecurity {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AccessSecurityCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AccessSecurityCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AccessSecurityCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := accesssecurity.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := accesssecurity.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AccessSecurityCreate) check() error {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AccessSecurity.created_at"`)}
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AccessSecurity.updated_at"`)}
	}
	if _, ok := asc.mutation.Rule(); !ok {
		return &ValidationError{Name: "rule", err: errors.New(`ent: missing required field "AccessSecurity.rule"`)}
	}
	if _, ok := asc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "AccessSecurity.ip"`)}
	}
	if _, ok := asc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "AccessSecurity.source"`)}
	}
	if _, ok := asc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "AccessSecurity.priority"`)}
	}
	if len(asc.mutation.AssetsIDs()) == 0 {
		return &ValidationError{Name: "assets", err: errors.New(`ent: missing required edge "AccessSecurity.assets"`)}
	}
	return nil
}

func (asc *AccessSecurityCreate) sqlSave(ctx context.Context) (*AccessSecurity, error) {
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AccessSecurity.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (asc *AccessSecurityCreate) createSpec() (*AccessSecurity, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessSecurity{config: asc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accesssecurity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: accesssecurity.FieldID,
			},
		}
	)
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesssecurity.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: accesssecurity.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.Rule(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldRule,
		})
		_node.Rule = value
	}
	if value, ok := asc.mutation.IP(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldIP,
		})
		_node.IP = value
	}
	if value, ok := asc.mutation.Source(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accesssecurity.FieldSource,
		})
		_node.Source = value
	}
	if value, ok := asc.mutation.Priority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: accesssecurity.FieldPriority,
		})
		_node.Priority = value
	}
	if nodes := asc.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   accesssecurity.AssetsTable,
			Columns: []string{accesssecurity.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: asset.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessSecurityCreateBulk is the builder for creating many AccessSecurity entities in bulk.
type AccessSecurityCreateBulk struct {
	config
	builders []*AccessSecurityCreate
}

// Save creates the AccessSecurity entities in the database.
func (ascb *AccessSecurityCreateBulk) Save(ctx context.Context) ([]*AccessSecurity, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AccessSecurity, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessSecurityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AccessSecurityCreateBulk) SaveX(ctx context.Context) []*AccessSecurity {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AccessSecurityCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AccessSecurityCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}
